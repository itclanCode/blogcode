(window.webpackJsonp=window.webpackJsonp||[]).push([[431],{2145:function(e,v,s){"use strict";s.r(v);var _=s(12),a=Object(_.a)({},(function(){var e=this,v=e.$createElement,s=e._self._c||v;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"快速导航"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#快速导航"}},[e._v("#")]),e._v(" 快速导航")]),e._v(" "),s("TOC"),e._v(" "),s("h2",{attrs:{id:"第1题-说一说js数据类型有哪些-他们之间的区别是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第1题-说一说js数据类型有哪些-他们之间的区别是什么"}},[e._v("#")]),e._v(" 第1题-说一说JS数据类型有哪些,他们之间的区别是什么")]),e._v(" "),s("p",[e._v("数字("),s("code",[e._v("number")]),e._v("),布尔("),s("code",[e._v("boolean")]),e._v("),字符串"),s("code",[e._v("string")]),e._v(","),s("code",[e._v("null")]),e._v(","),s("code",[e._v("undefined")]),e._v(","),s("code",[e._v("Symbol")]),e._v(","),s("code",[e._v("Object")]),e._v(","),s("code",[e._v("function")])]),e._v(" "),s("p",[s("code",[e._v("JS")]),e._v("数据类型分为两种:")]),e._v(" "),s("h3",{attrs:{id:"类型不同"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型不同"}},[e._v("#")]),e._v(" 类型不同")]),e._v(" "),s("ul",[s("li",[e._v("基本(简单)数据类型(7种):"),s("code",[e._v("Number")]),e._v(","),s("code",[e._v("String")]),e._v(","),s("code",[e._v("Boolean")]),e._v(","),s("code",[e._v("Null")]),e._v(","),s("code",[e._v("undefined")]),e._v(","),s("code",[e._v("Symbol")]),e._v(","),s("code",[e._v("BigInt")])]),e._v(" "),s("li",[e._v("引用(复杂/非)数据类型: "),s("code",[e._v("Object")]),e._v("，对象,数组,正则,日期,Math都属于"),s("code",[e._v("Object")])])]),e._v(" "),s("h3",{attrs:{id:"本质区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#本质区别"}},[e._v("#")]),e._v(" 本质区别")]),e._v(" "),s("p",[s("strong",[e._v("存储方式")]),e._v(": 基本数据类型存储在栈中,而非基本数据类型存储在堆中\n"),s("strong",[e._v("存储大小")]),e._v(": 基本数据类型存储在栈中,占据的空间小,属于被频繁使用的数据,而引用数据类型是存储在堆内存中,占据空间大,引用数据类型在栈中存储了指针，该指正指向的实体的起始地止,当解释器寻找引用值时,会检索在栈中的地止,取得地止后从堆中获得实体")]),e._v(" "),s("p",[s("code",[e._v("Symbol")]),e._v("是"),s("code",[e._v("Es6")]),e._v("新出的一种数据类型,这种数据类型的特点就是没有重复的数据,可以作为"),s("code",[e._v("object")]),e._v("的"),s("code",[e._v("key")])]),e._v(" "),s("p",[e._v("数据的创建方法"),s("code",[e._v("Symbol()")]),e._v(",因为它的构造函数不够完整,所以不能使用"),s("code",[e._v("new Symbol()")]),e._v("创建数据,由于"),s("code",[e._v("Symbol()")]),e._v("创建数据具有唯一性,所以"),s("code",[e._v("Symbol()!==Symbol()")]),e._v(",同时使用"),s("code",[e._v("Symbol")]),e._v("数据作为"),s("code",[e._v("key")]),e._v("不能使用"),s("code",[e._v("for")]),e._v("获取到这个"),s("code",[e._v("key")])]),e._v(" "),s("p",[e._v("需要使用"),s("code",[e._v("Object.getOwnPropertySymbols(obj)")]),e._v("获得这个"),s("code",[e._v("obj")]),e._v("对象中"),s("code",[e._v("key")]),e._v("类型是"),s("code",[e._v("Symbol")]),e._v("的"),s("code",[e._v("key")]),e._v("值")]),e._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("let")]),e._v(" key "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("Symbol")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'key'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("let")]),e._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'symbol'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("let")]),e._v(" keyArray "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("getOwnPropertySymbols")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("obk"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 返回一个数组[Symbol['key']]")]),e._v("\nobj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("keyArray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 'symbol'")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("p",[s("code",[e._v("BigInt")]),e._v("也是"),s("code",[e._v("Es6")]),e._v("新出的一种数据类型,这种数据类型的特点就是数据涵盖的范围大,能够解决超出普通数据类型范围报错的问题")]),e._v(" "),s("h3",{attrs:{id:"使用方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用方法"}},[e._v("#")]),e._v(" 使用方法")]),e._v(" "),s("ul",[s("li",[e._v("整数末尾直接+n: 4352342643634324n")]),e._v(" "),s("li",[e._v("调用"),s("code",[e._v("BigInt()")]),e._v('构造函数: BigInt("43342634634646434")')])]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("注意事项")]),e._v(" "),s("p",[s("code",[e._v("BigInt")]),e._v("和"),s("code",[e._v("Number")]),e._v("之间不能进行混合操作")])]),e._v(" "),s("p",[e._v("更多相关: "),s("RouterLink",{attrs:{to:"/fontend/js/understand-symbol/"}},[e._v("理解Es6中的Symbol类型")])],1),e._v(" "),s("h2",{attrs:{id:"第2题-说一下promise是什么以及它是怎么使用的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第2题-说一下promise是什么以及它是怎么使用的"}},[e._v("#")]),e._v(" 第2题-说一下promise是什么以及它是怎么使用的")]),e._v(" "),s("p",[s("code",[e._v("Promise")]),e._v("是异步微任务,解决了异步多层嵌套的问题,也就是解决回调地域的问题,让代码可读性更高,更容易维护")]),e._v(" "),s("p",[e._v("具体使用: "),s("code",[e._v("Promise")]),e._v("是"),s("code",[e._v("Es6")]),e._v("提供的一个构造函数，可以使用"),s("code",[e._v("Promise")]),e._v("构造函数"),s("code",[e._v("new")]),e._v("一个实例,"),s("code",[e._v("Promise")]),e._v("构造函数接收一个函数作为参数")]),e._v(" "),s("p",[e._v("这个函数有两个参数,分别是"),s("code",[e._v("resolve")]),e._v("和"),s("code",[e._v("reject")]),e._v(","),s("code",[e._v("resolve")]),e._v("将"),s("code",[e._v("Promise")]),e._v("的状态等待变为成功,将异步操作的结果作为参数传递过去,"),s("code",[e._v("reject")]),e._v("则将")]),e._v(" "),s("p",[e._v("状态由等待转变为失败,在异步操作失败时调用,将异步操作报出的报出的错误作为参数传递过去")]),e._v(" "),s("p",[e._v("实例创建完成后,可以使用"),s("code",[e._v("then")]),e._v("方法分别指定成功或失败的回调函数,也可以使用"),s("code",[e._v("catch")]),e._v("捕获失败,"),s("code",[e._v("then")]),e._v("和"),s("code",[e._v("catch")]),e._v("最终返回的也是一个"),s("code",[e._v("Promise")]),e._v(",所以可以链式调用")]),e._v(" "),s("p",[s("strong",[e._v("特点")]),e._v(":")]),e._v(" "),s("ol",[s("li",[e._v("对象的状态不受外界影响("),s("code",[e._v("Promise")]),e._v("对象代表一个异步操作,有三种状态)")])]),e._v(" "),s("p",[s("code",[e._v("pending")]),e._v(":执行中,"),s("code",[e._v("Resolved")]),e._v("(成功,又称"),s("code",[e._v("Fullfilled")]),e._v("),"),s("code",[e._v("rejected")]),e._v("(拒绝),其中"),s("code",[e._v("pending")]),e._v("为初始状态,"),s("code",[e._v("fulfilled")]),e._v("和"),s("code",[e._v("rejected")]),e._v("为结束状态,结束状态表示"),s("code",[e._v("Promise")]),e._v("的生命周期已经结束")]),e._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[e._v("一旦状态改变,就会在变,"),s("code",[e._v("Promise")]),e._v("对象的状态改变,只有两种可能(状态凝固了,就不会在变了,会一直保持这个结果)")])]),e._v(" "),s("p",[e._v("从"),s("code",[e._v("Pending")]),e._v("变为"),s("code",[e._v("Resolved")]),e._v(",从"),s("code",[e._v("Pending")]),e._v("变为"),s("code",[e._v("Rejected")])]),e._v(" "),s("p",[s("code",[e._v("resolve")]),e._v("方法的参数是"),s("code",[e._v("then")]),e._v("中回调函数的参数,"),s("code",[e._v("reject")]),e._v("方法中的参数"),s("code",[e._v("catch")]),e._v("中的参数,"),s("code",[e._v("then")]),e._v("方法和"),s("code",[e._v("catch")]),e._v("方法只要不报错,返回的都是一个"),s("code",[e._v("fulllfilled")]),e._v("状态的"),s("code",[e._v("promise")])]),e._v(" "),s("p",[s("strong",[e._v("Promise.resolve()")]),e._v(": 返回的"),s("code",[e._v("Promise")]),e._v("对象状态为"),s("code",[e._v("fulfilled")]),e._v(",并且将该"),s("code",[e._v("value")]),e._v("传递给对应的"),s("code",[e._v("then")]),e._v("方法")]),e._v(" "),s("p",[s("strong",[e._v("Promise.reject()")]),e._v(": 返回一个状态为失败的"),s("code",[e._v("Promise对象")]),e._v(",并将给定的失败信息传递给对应的处理方法")]),e._v(" "),s("p",[s("strong",[e._v("Promise.all()")]),e._v(":返回一个新的"),s("code",[e._v("promise")]),e._v("对象,该"),s("code",[e._v("promise")]),e._v("对象在参数对象里所有的"),s("code",[e._v("promise")]),e._v("对象都成功的时候,才会触发成功,一旦有一个失败，则整个都会失败")]),e._v(" "),s("p",[s("strong",[e._v("Promise.any()")]),e._v(": 接收一个"),s("code",[e._v("Promise")]),e._v("对象的集合,当其中的一个"),s("code",[e._v("Promise")]),e._v("成功,就返回那个成功的"),s("code",[e._v("promise")]),e._v("的值")]),e._v(" "),s("p",[s("strong",[e._v("Promise.race()")]),e._v(": 当参数里的任意一个子"),s("code",[e._v("promise")]),e._v("被成功或失败后,父"),s("code",[e._v("promise")]),e._v("马上也会用子"),s("code",[e._v("promise")]),e._v("的成功返回值或失败详情作为参数调用调用父"),s("code",[e._v("promise")]),e._v("绑定的对象,并返回该"),s("code",[e._v("promise")]),e._v("对象")]),e._v(" "),s("h2",{attrs:{id:"第3题-说一下bfc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第3题-说一下bfc"}},[e._v("#")]),e._v(" 第3题-说一下BFC")]),e._v(" "),s("p",[e._v("块级格式化上下文,独立的渲染区域,不会影响边界以外的元素")]),e._v(" "),s("p",[e._v("产生BFC的条件: "),s("code",[e._v("float")]),e._v(","),s("code",[e._v("position")]),e._v(","),s("code",[e._v("overflow")]),e._v(","),s("code",[e._v("display")])]),e._v(" "),s("p",[e._v("块级格式化上下文,是"),s("code",[e._v("web")]),e._v("页面一块独立的渲染区域,内部元素的渲染不会影响边界以外的元素")]),e._v(" "),s("p",[s("code",[e._v("BFC")]),e._v("布局规则,内部盒子会在垂直方向,一个接一个的放置,"),s("code",[e._v("box")]),e._v("垂直方向的距离由"),s("code",[e._v("margin")]),e._v("决定,属于同一个"),s("code",[e._v("BFC")]),e._v("的两个相邻的"),s("code",[e._v("BOX")]),e._v("的"),s("code",[e._v("margin")]),e._v("会发生重叠")]),e._v(" "),s("p",[s("code",[e._v("BFC")]),e._v("的区域不会与"),s("code",[e._v("float")]),e._v("的"),s("code",[e._v("box")]),e._v("重叠")]),e._v(" "),s("p",[e._v("清除浮动:"),s("code",[e._v("overflow:hiiden")]),e._v(",解决外边距的合并问题")]),e._v(" "),s("h2",{attrs:{id:"第4题-说一说js中有几种方法可以判断变量的类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第4题-说一说js中有几种方法可以判断变量的类型"}},[e._v("#")]),e._v(" 第4题-说一说js中有几种方法可以判断变量的类型")]),e._v(" "),s("p",[e._v("在"),s("code",[e._v("js")]),e._v("中有4种方法判断变量的类型,分别是"),s("code",[e._v("typepf")]),e._v(","),s("code",[e._v("instanceof")]),e._v(","),s("code",[e._v("Object.prototype.toString.call()")])]),e._v(" "),s("p",[s("code",[e._v("constructor")]),e._v(":主要用于引用数据类型")]),e._v(" "),s("p",[s("code",[e._v("typeof")]),e._v(":常用于判断基本数据类型,对于数据类型,除了"),s("code",[e._v("function")]),e._v("返回"),s("code",[e._v("funciton")]),e._v(",其余的全部返回"),s("code",[e._v("Object")])]),e._v(" "),s("p",[s("code",[e._v("instanceof")]),e._v(":主要用于区分引用数据类型,监测方法是监测的类型在当前实例的原型链上,用其监测出来的结果都是"),s("code",[e._v("true")])]),e._v(" "),s("p",[e._v("不太适合用于简单的数据类型的监测,监测过程繁琐且对于简单数据类型的"),s("code",[e._v("undefined")]),e._v(","),s("code",[e._v("null")]),e._v(","),s("code",[e._v("symbol")]),e._v("监测不出来")]),e._v(" "),s("p",[s("code",[e._v("constructor")]),e._v(":用于监测引用数据类型,监测方法是获取实例的构造函数判断和某个类是否相同")]),e._v(" "),s("p",[e._v("如果相同,那就说明该数据是符合那个数据类型的,这种方法不会把原型链上的其他类也加入进来,避免了原型链的干扰")]),e._v(" "),s("p",[s("code",[e._v("Object.prototype.toString.call()")]),e._v(":适用于所有类型的判断检测,检测方法是"),s("code",[e._v("Object.prototype.toString.call(数据)")]),e._v("返回的是该数据类型的字符串")]),e._v(" "),s("p",[e._v("这四种判断数据类型的方法中,各种数据类型都能监测且监测精准的就是"),s("code",[e._v("Object.protype.toString.call()")]),e._v("这种方法")]),e._v(" "),s("p",[s("code",[e._v("instanceof")]),e._v("在查找过程中会验证当前类的原型"),s("code",[e._v("prototype")]),e._v("是否会出现在示例的原型链"),s("code",[e._v("__proto_")]),e._v("上,只要它的原型链上,结果都为"),s("code",[e._v("true")])]),e._v(" "),s("p",[s("code",[e._v("instanceof")]),e._v("在查找的过程中会遍历下面的变量的原型链,直到找到变量的"),s("code",[e._v("prototype")]),e._v(",找到则返回"),s("code",[e._v("true")]),e._v(",没有找到则返回"),s("code",[e._v("false")])]),e._v(" "),s("h2",{attrs:{id:"第5题-说一下vue的钩子函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第5题-说一下vue的钩子函数"}},[e._v("#")]),e._v(" 第5题-说一下Vue的钩子函数")]),e._v(" "),s("p",[s("code",[e._v("Vue")]),e._v("钩子函数是在"),s("code",[e._v("Vue")]),e._v("实例从创建到销毁的过程中自动执行的函数,钩子函数用来描述一个组件从引入到退出的全过程中的某个过程，整个过程称为生命周期\n"),s("code",[e._v("Vue")]),e._v("钩子函数按照组件生命周期的过程分为挂载阶段,更新阶段和销毁阶段")]),e._v(" "),s("h2",{attrs:{id:"vue2生命周期钩子函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue2生命周期钩子函数"}},[e._v("#")]),e._v(" Vue2生命周期钩子函数")]),e._v(" "),s("ol",[s("li",[s("p",[s("code",[e._v("beforeCreate()")]),e._v(":在"),s("code",[e._v("new")]),e._v("一个"),s("code",[e._v("Vue")]),e._v("实例后,只有一些默认的生命周期钩子和默认事件,其他的东西都还没创建,在此生命周期执行的时候,"),s("code",[e._v("data")]),e._v("和"),s("code",[e._v("methods")]),e._v("中的数据都没有初始化")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("created()")]),e._v(":在示例创建完成之后,数据已经准备好,但是挂载"),s("code",[e._v("DOM")]),e._v("节点还没有开始,此时无法访问"),s("code",[e._v("DOM")]),e._v("节点")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("beforeMount()")]),e._v(":在挂载开始之前被调用,"),s("code",[e._v("render")]),e._v("函数首次被调用,在此时,模板编译成了render函数,但是还没有渲染成真实的DOM节点")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("mounted()")]),e._v(":在挂载完成后被调用,此时"),s("code",[e._v("DOM")]),e._v("节点已经全部渲染完毕,可以在这个钩子函数中操作"),s("code",[e._v("DOM")]),e._v("节点,例如获取元素的大小和位置等")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("beforeUpdate()")]),e._v(":在数据更新之前被调用,可以在此时对更新前的数据进行操作,但此时还无法访问到更新后的数据")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("updated()")]),e._v(":在数据更新后被调用,DOM已经被重新渲染,可以在此时对DOM进行操作,但是需要注意避免无限循环的情况")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("beforeDestory()")]),e._v(":在实例销毁之前被调用,可以在此时进行一些清理工作,例如：清除定时器或取消事件监听等")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("destroyed()")]),e._v(":在实例销毁之后被调用,此时实例中的所有东西都已经被销毁,无法在访问到实例中的数据和方法")])])]),e._v(" "),s("p",[e._v("在父子组件中,钩子函数的执行顺序如下所示")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("挂载阶段: 父"),s("code",[e._v("beforeCreate")]),e._v(" > 父"),s("code",[e._v("created")]),e._v(" > 子"),s("code",[e._v("beforeCreate")]),e._v(" > 子"),s("code",[e._v("created")]),e._v(" > 子"),s("code",[e._v("beforeMount")]),e._v(" > 子"),s("code",[e._v("mounted")]),e._v(" > 父"),s("code",[e._v("mounted")])])]),e._v(" "),s("li",[s("p",[e._v("更新阶段:父"),s("code",[e._v("beforeUpdate")]),e._v(" > 子"),s("code",[e._v("beforeUpdate")]),e._v(" > 子"),s("code",[e._v("updated")]),e._v(" >父"),s("code",[e._v("updated")])])]),e._v(" "),s("li",[s("p",[e._v("销毁阶段: 父"),s("code",[e._v("beforeDestory")]),e._v(" > 子"),s("code",[e._v("beforeDestory")]),e._v(" > 子destoryed > 父"),s("code",[e._v("destoryed")])])])]),e._v(" "),s("p",[e._v("总之,"),s("code",[e._v("Vue")]),e._v("钩子函数是,在特定阶段,能够自动执行的函数,例如:在数据更新后对"),s("code",[e._v("DOM")]),e._v("进行操作或在实例销毁前进行一些清理工作")]),e._v(" "),s("h2",{attrs:{id:"vue3生命周期钩子函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue3生命周期钩子函数"}},[e._v("#")]),e._v(" Vue3生命周期钩子函数")]),e._v(" "),s("p",[s("code",[e._v("Vue3")]),e._v("的生命周期钩子函数和"),s("code",[e._v("Vue2")]),e._v("的生命周期选项是很相似的，但是"),s("code",[e._v("Vue3")]),e._v("中的生命周期钩子函数被命名为“钩子”，并且使用了"),s("code",[e._v("Composition API")]),e._v("的方式来实现。以下是"),s("code",[e._v("Vue3")]),e._v("的钩子函数：")]),e._v(" "),s("p",[s("code",[e._v("setup()")]),e._v("：在组件创建之前执行，相当于"),s("code",[e._v("Vue2")]),e._v("中的"),s("code",[e._v("beforeCreate")]),e._v("和"),s("code",[e._v("created")]),e._v("钩子函数，用于创建组件的"),s("code",[e._v("data")]),e._v("和"),s("code",[e._v("method")]),e._v(",它是在"),s("code",[e._v("beforeCreate")]),e._v("之前就执行了的")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("onBeforeMount()")]),e._v("：在组件挂载到节点上之前执行的函数，相当于"),s("code",[e._v("Vue2")]),e._v("中的"),s("code",[e._v("beforeMount")]),e._v("钩子函数。")]),e._v(" "),s("li",[s("code",[e._v("onMounted()")]),e._v("：在组件挂载完成后执行的函数，相当于"),s("code",[e._v("Vue2")]),e._v("中的"),s("code",[e._v("mounted")]),e._v("钩子函数。")]),e._v(" "),s("li",[s("code",[e._v("onBeforeUpdate()")]),e._v("：在组件更新之前执行的函数，相当于"),s("code",[e._v("Vue2")]),e._v("中的"),s("code",[e._v("beforeUpdate")]),e._v("钩子函数。")]),e._v(" "),s("li",[s("code",[e._v("onUpdated()")]),e._v("：在组件更新完成之后执行的函数，相当于"),s("code",[e._v("Vue2")]),e._v("中的"),s("code",[e._v("updated")]),e._v("钩子函数。")]),e._v(" "),s("li",[s("code",[e._v("onBeforeUnmount()")]),e._v("：在组件卸载之前执行的函数，相当于"),s("code",[e._v("Vue2")]),e._v("中的"),s("code",[e._v("beforeDestroy")]),e._v("钩子函数。")]),e._v(" "),s("li",[s("code",[e._v("onUnmounted()")]),e._v("：在组件卸载完成后执行的函数，相当于"),s("code",[e._v("Vue2")]),e._v("中的"),s("code",[e._v("destroyed")]),e._v("钩子函数。\n"),s("code",[e._v("onActivated()")]),e._v("：在组件被包含在"),s("code",[e._v("<keep-alive>")]),e._v("中，并且被激活时执行。\n除了以上的钩子函数之外，"),s("code",[e._v("Vue3")]),e._v("还提供了一些额外的钩子函数，如"),s("code",[e._v("onRenderTriggered")]),e._v("和"),s("code",[e._v("onRenderTracked")]),e._v("，用于在开发过程中进行调试。")])]),e._v(" "),s("p",[e._v("在"),s("code",[e._v("Vue3")]),e._v("中，可以使用"),s("code",[e._v("<script setup>")]),e._v("语法糖来定义组件的逻辑。使用"),s("code",[e._v("<script setup>")]),e._v("可以让代码更加简洁，阅读性更高。同时，Vue3还引入了自定义Hooks的概念，可以将一些逻辑抽象出来，实现代码的复用。")]),e._v(" "),s("p",[e._v("Vue3的生命周期钩子函数和Vue2的生命周期选项是如何合并在一起的呢？实际上，在Vue3的内部实现中，会将Vue3的钩子函数转换为Vue2的生命周期选项。具体来说，Vue3的钩子函数会被注册到Vue2的生命周期选项中,如下所示")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function registerLifecycleHook(\n    register: Function,\n    hook?: Function | Function[]\n  ) {\n    if (isArray(hook)) {\n      hook.forEach(_hook => register(_hook.bind(publicThis)))\n    } else if (hook) {\n      register((hook as Function).bind(publicThis))\n    }\n  }\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br")])]),s("p",[e._v("在上面的代码中，"),s("code",[e._v("registerLifecycleHook")]),e._v("函数会将"),s("code",[e._v("Vue3")]),e._v("的钩子函数注册到"),s("code",[e._v("Vue2")]),e._v("的生命周期选项中。如果钩子函数是一个数组，那么会循环注册每一个钩子函数；如果钩子函数不是一个数组，那么只会注册一个钩子函数")]),e._v(" "),s("h2",{attrs:{id:"第6题-es6中的拓展运算符有哪些使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第6题-es6中的拓展运算符有哪些使用"}},[e._v("#")]),e._v(" 第6题-Es6中的拓展运算符有哪些使用")]),e._v(" "),s("p",[e._v("在ES6中，事件扩展运算符可以用于数组和对象的展开操作，用于将一个数组转为用逗号分隔的参数序列或将一个对象转为多个参数的形式传入一个函数中。以下是事件扩展运算符的用法和示例")]),e._v(" "),s("h2",{attrs:{id:"数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[e._v("#")]),e._v(" 数组")]),e._v(" "),s("p",[e._v("构造数组：使用扩展运算符可以更简单、更优雅地构造新数组，而不必使用"),s("code",[e._v("push")]),e._v("、"),s("code",[e._v("splice")]),e._v("、"),s("code",[e._v("concat")]),e._v("等方法将已有数组元素变成新数组的一部分。例如")]),e._v(" "),s("p",[e._v("扩展运算符打印可迭代对象的每一项")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("console.log(...[1,2,3]); // 1 2 3\nconsole.log(1,...[2,3,4],5); // 1 2 3 4 5\nconsole.log([1,...[2,3,4],5]); // [1, 2, 3, 4, 5]\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("ul",[s("li",[s("strong",[e._v("用法1-复制数组")]),e._v("：使用扩展运算符可以更方便地复制一个数组，而不必使用"),s("code",[e._v("slice")]),e._v("方法。例如")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("let arr = [1, 2, 3];\nlet arr2 = [...arr]; // [1, 2, 3]\narr2.push(4); \nconsole.log(arr2); // [1, 2, 3, 4]\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("ul",[s("li",[s("strong",[e._v("用法2-数组合并")]),e._v("：使用扩展运算符可以更简单、更优雅地合并两个数组。例如")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("var arr1 = [0, 1, 2];\nvar arr2 = [3, 4, 5];\nvar arr3 = [...arr1, ...arr2]; // [0, 1, 2, 3, 4, 5]\n// 等同于\nvar arr4 = arr1.concat(arr2);\nconsole.log(arr3, arr4); // [0, 1, 2, 3, 4, 5] [0, 1, 2, 3, 4, 5]\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])]),s("ol",{attrs:{start:"2"}},[s("li",[e._v("对象")])]),e._v(" "),s("p",[e._v("复制对象：使用扩展运算符可以更方便地复制一个对象。例如")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("let obj = {a: 1, b: 2, c: 3};\nlet obj2 = {...obj}; // {a: 1, b: 2, c: 3}\nobj2.d = 4; \nconsole.log(obj2); // {a: 1, b: 2, c: 3, d: 4}\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("ul",[s("li",[s("strong",[e._v("用法3-对象合并")]),e._v("：使用扩展运算符可以更简单、更优雅地合并两个对象。例如")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("let obj1 = {a: 1, b: 2};\nlet obj2 = {c: 3, d: 4};\nlet obj3 = {...obj1, ...obj2}; // {a: 1, b: 2, c: 3, d: 4}\n// 等价于\nlet obj1 = {a:1,b:2};\nlet obj3 = Object.assign(obj1,obj2);// {a: 1, b: 2, c: 3, d: 4}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])]),s("p",[e._v("对象中的拓展运算符"),s("code",[e._v("{...}")]),e._v("用于取出参数对象中所有可遍历属性,拷贝到当前对象之中\n"),s("code",[e._v("Object.assign")]),e._v("方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）\n"),s("code",[e._v("Object.assign")]),e._v("方法的第一个参数是目标对象,后面的参数都是源对象,如果目标对象与原对象存在同名属性,或多个源对象有同名属性,则后面的属性会覆盖前面的属性\n如果用户自定义的属性，放在扩展运算符后面，则扩展运算符内部的同名属性会被覆盖掉")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" let bar = {a: 1, b: 2};\n let baz = {...bar, ...{a:2, b: 4}};  // {a: 2, b: 4}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("扩展运算符对对象实例的拷贝属于一种浅拷贝")]),e._v(" "),s("p",[e._v("引用数据类型比如"),s("code",[e._v("Array")]),e._v("，在拷贝的时候拷贝的是对象的引用，当原对象发生变化的时候，拷贝对象也跟着变化")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("let obj1 = { a: 1, b: 2};\n let obj2 = { ...obj1, b: 'itclancoder'};\n console.log(obj1); // {a: 1, b: 2}\n console.log(obj2); //  {a: 1, b: \"itclancoder\"}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("p",[e._v("上面这个例子扩展运算符拷贝的对象是基础数据类型，因此对"),s("code",[e._v("obj2")]),e._v("的修改并不会影响"),s("code",[e._v("obj1")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("let obj1 = { a: 1, b: 2, c: {name: 'a'}};\nlet obj2 = { ...obj1};\nobj2.c.name = 'itclancoder';\nconsole.log(obj1); // {a: 1, b: 2, c: {name: 'itclancoder'}}\nconsole.log(obj2); // {a: 1, b: 2, c: {name: 'itclancoder'}}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[e._v("这里可以看到，对obj2的修改影响到了被拷贝对象"),s("code",[e._v("obj1")]),e._v("，原因上面已经说了，因为"),s("code",[e._v("obj1")]),e._v("中的对象"),s("code",[e._v("c")]),e._v("是一个引用数据类型，拷贝的时候拷贝的是对象的引用")]),e._v(" "),s("p",[e._v("对象的解构赋值用于从一个对象取值，相当于将目标对象自身的所有可遍历、但尚未被读取的属性，分配到指定的对象上面。所有的键和它们的值，都会拷贝到新对象上面")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" let { x, y, ...z } = { x: 1, y: 2, a: 3, b: 4 };\n x // 1\n y // 2\n z // { a: 3, b: 4 }\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("p",[e._v("注意：由于解构赋值要求等号右边是一个对象，所以如果等号右边是"),s("code",[e._v("undefined")]),e._v("或"),s("code",[e._v("null")]),e._v("，就会报错，因为它们无法转为对象。而且解构赋值必须是最后一个参数，否则会报错")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" let { ...z } = null; // 运行时错误\n let { ...z } = undefined; // 运行时错误\n let { ...x, y, z } = someObject; // 句法错误\n let { x, ...y, ...z } = someObject; // 句法错误\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("p",[e._v("如果扩展运算符后面是字符串，它会自动转成一个类似数组的对象，因此返回的不是空对象。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('{...\'hello\'}\n // {0: "h", 1: "e", 2: "l", 3: "l", 4: "o"}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("h3",{attrs:{id:"用法4-在react或vue中的运用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用法4-在react或vue中的运用"}},[e._v("#")]),e._v(" 用法4-在React或Vue中的运用")]),e._v(" "),s("p",[e._v("在React或vue组件中，可以使用扩展运算符来进行props的传递")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const params = {name: 'Jine', age: 21}\n<CustomComponent {...params} />\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("h3",{attrs:{id:"解构参数传递"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解构参数传递"}},[e._v("#")]),e._v(" 解构参数传递")]),e._v(" "),s("p",[e._v("比如:求数组的最大,最小值")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const arr = [2024,2,50,100];\nconst min = Math.min(...arr);\nconst max = Math.max(...arr);\nconsole.log(min,max); // 2,2024\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("h3",{attrs:{id:"用法5-数组去重"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用法5-数组去重"}},[e._v("#")]),e._v(" 用法5-数组去重")]),e._v(" "),s("p",[e._v("拓展运算符配合"),s("code",[e._v("set")]),e._v("实现数组去重")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("var arr = [2023,'itclancoder',2023, 1024, -9, -9, 2023, 1024, 2, 3, 2, 3, 6, 8,8,8,-8,'itclancoder','itclancoder']\nvar  set1= [...new  Set(arr)]\n//可以直接写出var  set1= new  Set(arr)\n//console.log(set1)\n//方法1\nvar newArr=Array.from(set1)\nconsole.log(newArr)\nvar arr = [2023,'itclancoder',2023, 1024, -9, -9, 2023, 1024, 2, 3, 2, 3, 6, 8,8,8,-8,'itclancoder','itclancoder']\nvar  set1= [...new  Set(arr)]\n//可以直接写成var  set1= new  Set(arr)\n//console.log(set1)\n//方法2\nvar newArr= [...set1]\nconsole.log(newArr)\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br")])]),s("h3",{attrs:{id:"用法6-字符串转字符数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用法6-字符串转字符数组"}},[e._v("#")]),e._v(" 用法6-字符串转字符数组")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const name='itclancoder'\nconst strarr=[...name]\nconsole.log(strarr)\n//['i','t','c','l','a','n','c','o','d','e','r']\n//进行简单的字符串截取\nstrarr.lenght=2\nconsole.log(strarr.join(\"\"));//‘it’\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])]),s("p",[e._v("以上就是关于拓展运算符的一些使用")]),e._v(" "),s("h2",{attrs:{id:"第7题-说一说服务端渲染与客户端渲染"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第7题-说一说服务端渲染与客户端渲染"}},[e._v("#")]),e._v(" 第7题-说一说服务端渲染与客户端渲染")]),e._v(" "),s("h2",{attrs:{id:"服务端渲染"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#服务端渲染"}},[e._v("#")]),e._v(" 服务端渲染")]),e._v(" "),s("p",[e._v("服务端渲染（Server-Side Rendering，SSR）是指在服务器端生成完整的"),s("code",[e._v("HTML")]),e._v("页面并将其返回给浏览器，与传统的客户端渲染方式相反。")]),e._v(" "),s("p",[e._v("在传统的客户端渲染中，浏览器首先接收到一个空的"),s("code",[e._v("HTML")]),e._v("页面，在页面加载期间，浏览器使用"),s("code",[e._v("JavaScript")]),e._v("来动态生成页面内容。而在服务端渲染中，服务器端负责构建整个"),s("code",[e._v("HTML")]),e._v("页面，包括将数据和组件渲染为HTML，然后将整个"),s("code",[e._v("HTML")]),e._v("页面返回给浏览器。")]),e._v(" "),s("p",[e._v("服务端渲染的优势包括：")]),e._v(" "),s("ol",[s("li",[s("p",[e._v("更快的首次加载时间：由于浏览器直接接收到完整的HTML页面，网页可以更快地呈现给用户。")])]),e._v(" "),s("li",[s("p",[e._v("更好的SEO：搜索引擎爬虫可以直接抓取到完整HTML页面的内容，不需要通过JavaScript解析。")])]),e._v(" "),s("li",[s("p",[e._v("更好的性能：对于复杂的应用程序，服务端渲染可以分担客户端的负载，减轻浏览器的负担，并提供更流畅的体验")])]),e._v(" "),s("li",[s("p",[e._v("SSR 的响应性在服务端是不必要的，因为没有用户交互和 DOM 更新。为了更好的性能，默认情况下响应性在 SSR 期间是禁用的")])]),e._v(" "),s("li",[s("p",[e._v("在 "),s("code",[e._v("SSR")]),e._v(" 期间，只有 "),s("code",[e._v("beforeCreate")]),e._v(" 和 "),s("code",[e._v("created")]),e._v(" 这两个生命周期钩子会被调用，其他像"),s("code",[e._v("mounted")]),e._v("或 "),s("code",[e._v("updated")]),e._v(" 这样的生命周期钩子不会在 SSR 期间被调用，而只会在客户端运行。因此，我们应该避免在 "),s("code",[e._v("beforeCreate")]),e._v(" 和"),s("code",[e._v("created")]),e._v(" 钩子中使用会产生副作用且需要被清理的代码")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("SSR")]),e._v(" 适用于需要更快的到达时间的场景，优势在于慢网络和运行缓慢的设备场景。相比传统的 "),s("code",[e._v("SPA")]),e._v("，"),s("code",[e._v("SSR")]),e._v(" 服务器渲染标记在服务端渲染 "),s("code",[e._v("HTML")]),e._v(" 后即可显示，用户会更快的看到首屏渲染页面")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("SSR")]),e._v(" 不适用于同构资源的处理。在使用三方 "),s("code",[e._v("API")]),e._v(" 时必须保证运行不报错，需要特殊处理使其支持服务端和客户端都可运行。结合 "),s("code",[e._v("Vue")]),e._v(" 的钩子来说，能在 "),s("code",[e._v("SSR")]),e._v(" 中调用的生命周期只有 "),s("code",[e._v("beforeCreate")]),e._v(" 和 "),s("code",[e._v("created")])])]),e._v(" "),s("li",[s("p",[e._v("VNode 是 Vue 中用来描述虚拟 DOM 的数据结构，本身是 js 对象，兼容性极强，不依赖当前的执行环境，从而可以在服务端渲染及原生渲染。虚拟 DOM 频繁修改，最后比较出真实 DOM 需要更改的地方，可以达到局部渲染的目的，减少性能损耗")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("SSR")]),e._v(" 的实现流程大体与客户端渲染类似。浏览器请求 "),s("code",[e._v("URL")]),e._v("，前端服务器接收到 "),s("code",[e._v("URL")]),e._v(" 请求之后，根据不同的 "),s("code",[e._v("URL")]),e._v("，前端服务器向后端服务器请求数据，请求完成后，前端服务器会组装一个携带了具体数据的 "),s("code",[e._v("HTML")]),e._v(" 文本，并且返回给浏览器，浏览器得到 "),s("code",[e._v("HTML")]),e._v(" 之后开始渲染页面，同时，浏览器加载并执行 ``JavaScript"),s("code",[e._v("脚本，给页面上的元素绑定事件，让页面变得可交互。当用户与浏览器页面进行交互，如跳转到下一个页面时，浏览器会执行")]),e._v("JavaScript` 脚本，向后端服务器请求数据")])])]),e._v(" "),s("p",[e._v("一些服务端的框架,如"),s("code",[e._v("NuxtJs")])]),e._v(" "),s("h2",{attrs:{id:"客户端渲染"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#客户端渲染"}},[e._v("#")]),e._v(" 客户端渲染")]),e._v(" "),s("p",[e._v("客户端渲染是一种将网站或应用的代码逻辑从服务器端转移到客户端进行执行，以加快页面加载速度和交互性能的技术。在客户端渲染中，网页或应用的代码被编译成 "),s("code",[e._v("JavaScript")]),e._v(" 代码，然后在用户的浏览器中运行。相对于传统的服务器端渲染，客户端渲染可以更加快速地呈现页面，并且允许进行更多的动态交互，例如即时搜索和动画效果。")]),e._v(" "),s("p",[e._v("然而，客户端渲染也有一些缺点。由于大部分渲染工作需要在用户的浏览器中执行，因此客户端渲染可能导致页面加载速度更慢，并且可能对浏览器的性能造成一定的负担。此外，在处理搜索引擎优化（SEO）时，客户端渲染也可能会导致问题，因为搜索引擎爬虫可能无法正确地读取动态生成的内容")]),e._v(" "),s("p",[e._v("通常用"),s("code",[e._v("vue-cli")]),e._v("生成的脚手架代码,都是客户端渲染,有各个生命周期,执行不同的函数逻辑")]),e._v(" "),s("p",[e._v("服务端渲染和客户端渲染是处理网页的两种不同方法。服务端渲染 ("),s("code",[e._v("SSR")]),e._v(") 是在服务器上获取动态内容，将其转换为 "),s("code",[e._v("HTML")]),e._v(" 并将其发送到浏览器的过程")]),e._v(" "),s("p",[e._v("客户端渲染 ("),s("code",[e._v("CSR")]),e._v(") 是在浏览器中处理网页以显示不同的方法。以下是比较服务端渲染和客户端渲染的几个方面：")]),e._v(" "),s("ul",[s("li",[s("p",[s("strong",[e._v("渲染过程")]),e._v("：服务端渲染在服务器上生成 DOM 树，而客户端渲染在客户端浏览器上生成 DOM 树")])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("响应速度")]),e._v("：服务端渲染可以加快页面的响应速度，因为它可以在浏览器请求页面之前预先准备好 HTML。相比之下，客户端渲染需要在浏览器中加载\n"),s("code",[e._v("JavaScript")]),e._v(" 和其他资源，这可能会导致页面响应速度较慢")])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("SEO 优化")]),e._v("：服务端渲染更有利于爬虫爬取信息，因为所有内容都在 "),s("code",[e._v("HTML")]),e._v(" 中，爬虫可以轻松地找到和索引页面内容。相比之下，客户端渲染需要在浏览器中加载 "),s("code",[e._v("JavaScript")]),e._v(" 和其他资源，爬虫可能无法找到或索引页面内容")])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("Web 应用程序 VS 网站")]),e._v("："),s("code",[e._v("Web")]),e._v("应用程序涉及更多的用户交互，确保用户交互不会花费很长时间是至关重要的。因此，与 "),s("code",[e._v("SSR")]),e._v(" 相比，"),s("code",[e._v("CSR")]),e._v(" 更适用于 "),s("code",[e._v("Web")]),e._v(" 应用程序。而网站通常是提供信息内容的，所以可以使用 SSR")])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("页面加载时间")]),e._v("：在客户端渲染的情况下，由于所有支持脚本都是提前加载的，因此客户端渲染的加载时间更快。除非需要加载惰性 "),s("code",[e._v("JavaScript")]),e._v(" 模块，否则它不会向服务器发送请求。对于服务端渲染，在第一页加载中遵循的完整请求周期是重复的。这意味着服务端渲染对网页加载时间几乎没有任何影响。因此，在这种情况下，客户端渲染响应更快")])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("缓存的影响")]),e._v("：在客户端渲染中，基于 "),s("code",[e._v("CSR")]),e._v(" 的 "),s("code",[e._v("Web")]),e._v(" 应用程序也可以在没有互联网的情况下运行（除非您调用数据 "),s("code",[e._v("API")]),e._v("）。加载后，应用程序不再需要向服务器发送请求。这允许浏览 Web 应用程序，就像一个简单的桌面应用程序。然而，在服务端渲染中，总是向服务器发送请求。因此，与 CSR 相比，"),s("code",[e._v("SSR")]),e._v(" 的页面加载时间无疑更长。缓存确实提高了 "),s("code",[e._v("SSR")]),e._v(" 的内容渲染")])])]),e._v(" "),s("h2",{attrs:{id:"代码示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码示例"}},[e._v("#")]),e._v(" 代码示例")]),e._v(" "),s("p",[e._v("我们可以使用以下"),s("code",[e._v("Node.js")]),e._v("代码来设置服务器，并使用"),s("code",[e._v("React")]),e._v("渲染")]),e._v(" "),s("h3",{attrs:{id:"服务端代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#服务端代码"}},[e._v("#")]),e._v(" 服务端代码")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const express = require('express');\nconst React = require('react');\nconst ReactDOMServer = require('react-dom/server');\nconst App = require('./App'); // 或者你的入口组件\n\nconst app = express();\n\napp.get('/', (req, res) => {\n  const html = ReactDOMServer.renderToString(<App />);\n  res.send(`\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <title>服务端渲染</title>\n      </head>\n      <body>\n        <div id=\"root\">${html}</div>\n        <script src=\"/client.js\"><\/script>\n      </body>\n    </html>\n  `);\n});\n\napp.use(express.static('public')); // 客户端代码静态资源存放在public目录下\n\napp.listen(PORT, () => console.log(`Server started on port ${PORT}`))\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br")])]),s("h3",{attrs:{id:"客户端代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#客户端代码"}},[e._v("#")]),e._v(" 客户端代码")]),e._v(" "),s("p",[e._v("除了服务器端代码之外，我们还需要编写客户端代码，以便可以在浏览器中运行"),s("code",[e._v("JavaScript")]),e._v("，并且"),s("code",[e._v("React")]),e._v("可以在客户端中呈现"),s("code",[e._v("DOM")]),e._v("和管理其状态\n我们可以用以下客户端代码来启动"),s("code",[e._v("React")]),e._v("应用程序")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'; // 或者你的入口组件\n\nReactDOM.render(<App />, document.getElementById('root'));\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[e._v("通过以上代码，我们可以实现服务端渲染，以提高应用程序的性能和SEO效果。但是需要注意的是，服务端渲染可能会增加代码的复杂度，需要更多的配置和调试工作，因此需要仔细考虑是否需要使用服务端渲染来达到最佳的效果")]),e._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),s("p",[e._v("服务端渲染与客户端渲染是两种不同的反感,无论是"),s("code",[e._v("Vue")]),e._v("技术栈,还是"),s("code",[e._v("React")]),e._v("技术栈,都有对应的服务端框架")]),e._v(" "),s("p",[e._v("不过一般公司上面绝大多数的产品,很多用的都是客户端渲染的,如果用服务端渲染,那得考虑服务器负载等方面的,相对比较复杂")]),e._v(" "),s("h2",{attrs:{id:"第8题-说一说网页当中性能优化有哪些性能指标-如何量化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第8题-说一说网页当中性能优化有哪些性能指标-如何量化"}},[e._v("#")]),e._v(" 第8题-说一说网页当中性能优化有哪些性能指标，如何量化")]),e._v(" "),s("p",[e._v("网页性能优化的重要性不言而喻，因为它会直接影响到网站的访问速度、用户体验以及SEO排名等。以下是常见的几个性能指标及其量化方式")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("FCP（First Contentful Paint）：白屏时间，即页面中第一次有内容渲染的时间，值越低越好")])]),e._v(" "),s("li",[s("p",[e._v("SI（Speed Index）：页面渲染时间，即页面从白屏到渲染完毕的时间，值越低越好")])]),e._v(" "),s("li",[s("p",[e._v("页面加载时间：从页面开始加载到页面onload事件触发的时间。一般来说onload触发代表着直接通过HTML引用的CSS，JS，图片资源已经完全加载完毕,衡量网页从开始加载到完全展示所需的时间。通常以毫秒为单位进行计量，理想情况下，网页加载时间应该小于3秒")])]),e._v(" "),s("li",[s("p",[e._v("全部页面加载时间：全部页面载入时间指从最初启动浏览开始，直到所有元素都被加载完成后，在2秒后仍然没有网络活动的时间,理想情况下，渲染时间应该小于1秒")])]),e._v(" "),s("li",[s("p",[e._v("首字节时间：从客户端发起HTTP请求到服务端返回第一个字节的时间,理想情况下，TTFB应该小于200ms")])]),e._v(" "),s("li",[s("p",[e._v("DNS时间:从浏览器发起DNS查询到DNS查询结束的时间")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("TCP")]),e._v("时间：从浏览器发起"),s("code",[e._v("TCP")]),e._v("连接到"),s("code",[e._v("TCP")]),e._v("连接建立完成的时间")])]),e._v(" "),s("li",[s("p",[e._v("下载速度：从服务器下载资源的速度，通常以KB/s或MB/s表示")])]),e._v(" "),s("li",[s("p",[e._v("页面流畅度：指页面的动画和滚动是否流畅")])]),e._v(" "),s("li",[s("p",[e._v("页面大小：指网页的大小，通常以字节为单位进行计量。网页大小越小，加载时间越快，用户体验就会越好")])]),e._v(" "),s("li",[s("p",[e._v("网络丢包率：指在网络传输过程中丢失数据包的比例")])]),e._v(" "),s("li",[s("p",[e._v("网络时延：指数据从客户端发送到服务端并返回的时间")])]),e._v(" "),s("li",[s("p",[e._v("请求响应时间:指客户端发送请求到服务端返回响应的时间,请求次数越少，网页加载时间越短,用户体验就会越好")])]),e._v(" "),s("li",[s("p",[e._v("事务响应时间:指完成一次完整的操作所需要的时间，如用户登录、购物车结算等")])]),e._v(" "),s("li",[s("p",[e._v("并发用户数:指同时访问网站的用户数量")])])]),e._v(" "),s("p",[e._v("以上指标是常见的网页性能指标，可以用来量化网页性能。可以通过在浏览器中使用 "),s("code",[e._v("Performance")]),e._v(" 接口获取这些指标,使用"),s("code",[e._v("WebPageTest")]),e._v("、"),s("code",[e._v("Lighthouse")]),e._v("等工具检测网页性能，使用"),s("code",[e._v("CDN")]),e._v("、压缩资源、合并请求等方式进行优化等")]),e._v(" "),s("h2",{attrs:{id:"第9题-说一说前端有哪些性能优化手段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第9题-说一说前端有哪些性能优化手段"}},[e._v("#")]),e._v(" 第9题-说一说前端有哪些性能优化手段")]),e._v(" "),s("ol",[s("li",[e._v("减少请求数量")])]),e._v(" "),s("p",[e._v("减少页面中请求的资源数量可以有效地降低页面加载时间，常用的方法包括文件合并、使用雪碧图(CSS精灵技术),使用Base64等技术对图片进行优化等。文件合并可以将多个文件合并成一个文件，减少请求次数，但是需要注意文件合并也有自己的问题，如首屏渲染问题和缓存失效问题。使用雪碧图可以将多张图片合并为一张，减少请求次数")]),e._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[e._v("减小资源大小")])]),e._v(" "),s("p",[e._v("资源的大小对页面加载时间也有很大的影响，可以通过压缩图片、压缩代码等方式来减小资源的大小。压缩图片可以使用在线工具或者图片压缩库来实现，压缩代码可以使用压缩工具、去除注释和空格等方式来实现,也可以使用适当的图片格式：对于相同的图片，不同的图片格式占用的体积是不同的。例如，对于简单的图标，可以使用SVG格式，对于照片等复杂的图片，可以使用JPEG或WEBP格式")]),e._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[e._v("优化网络连接")])]),e._v(" "),s("p",[e._v("网络连接的质量和速度对页面加载时间也有很大的影响，可以通过使用CDN、使用预加载等方式来优化网络连接。CDN可以将资源分发到全球各地的服务器上，提高资源的访问速度；预加载可以在页面加载完成后，提前加载一些需要使用的资源，减少请求的等待时间")]),e._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[e._v("优化资源加载")])]),e._v(" "),s("p",[e._v("资源的加载方式也会影响页面的加载时间，可以通过异步加载、懒加载等方式来优化资源加载。异步加载可以将一些不必要的资源延迟加载，提高页面的加载速度；懒加载可以将一些图片、视频等资源延迟加载，只在需要时再加载，减少页面的加载时间。")]),e._v(" "),s("ol",{attrs:{start:"5"}},[s("li",[e._v("减少重绘回流")])]),e._v(" "),s("p",[e._v("重绘和回流是浏览器渲染页面时的两个重要步骤，它们会影响页面的性能。可以通过减少DOM操作、减少页面元素数量、精简HTML代码、减少DOM操作、避免多次重绘和回流、使用CSS3动画等方式来减少重绘回流,延迟加载等优化手段可以显著提高页面的加载速度。")]),e._v(" "),s("ol",{attrs:{start:"6"}},[s("li",[e._v("使用性能更好的"),s("code",[e._v("API")])])]),e._v(" "),s("p",[s("code",[e._v("JavaScript")]),e._v("提供了很多"),s("code",[e._v("API")]),e._v("，有些"),s("code",[e._v("API")]),e._v("的性能比较差，可以使用性能更好的"),s("code",[e._v("API")]),e._v("来替换。例如使用"),s("code",[e._v("document.querySelector")]),e._v("代替"),s("code",[e._v("document.getElementById")])]),e._v(" "),s("ol",{attrs:{start:"7"}},[s("li",[e._v("构建优化")])]),e._v(" "),s("p",[e._v("构建性能主要指构建速度，可以通过使用构建工具、缓存构建结果等方式来优化构建性能")]),e._v(" "),s("ol",{attrs:{start:"8"}},[s("li",[e._v("缓存")])]),e._v(" "),s("p",[e._v("通过设置缓存控制头信息，使用浏览器缓存和HTTP缓存等技术可以减少网络带宽消耗，提高页面的响应速度和用户体验")]),e._v(" "),s("ol",{attrs:{start:"9"}},[s("li",[e._v("使用CDN")])]),e._v(" "),s("p",[e._v("使用CDN可以将静态资源分布在多个服务器上，更快速地响应用户的请求，并降低服务器的负载")]),e._v(" "),s("ol",{attrs:{start:"10"}},[s("li",[e._v("Web前端框架优化")])]),e._v(" "),s("p",[e._v("选择一个性能高效且轻量级的Web前端框架，提高页面的加载速度和响应速度。")]),e._v(" "),s("ol",{attrs:{start:"11"}},[s("li",[e._v("服务器优化")])]),e._v(" "),s("p",[e._v("在服务器端优化中使用缓存机制、优化数据库查询、压缩服务器响应等手段减少服务端的负载，提升应用性能")]),e._v(" "),s("ol",{attrs:{start:"12"}},[s("li",[e._v("前置加载和懒加载")])]),e._v(" "),s("p",[e._v("前置加载技术使用预加载等技术来提前加载下一个页面或用户可能需要的资源，以提高网站速度和性能。 "),s("code",[e._v("Lazy loading")]),e._v("技术可以将页面上的图片或其他资源推迟到页面完全加载后再加载，以减少加载时间和带宽")]),e._v(" "),s("ol",{attrs:{start:"13"}},[s("li",[e._v("优化CSS和JS")])]),e._v(" "),s("p",[e._v("优化CSS和JS代码可以提高网站的性能。以下是一些优化技术的示例：")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("压缩CSS和JS代码")])]),e._v(" "),s("li",[s("p",[e._v("删除注释和无用代码")])]),e._v(" "),s("li",[s("p",[e._v("合并重复的CSS和JS代码")])]),e._v(" "),s("li",[s("p",[e._v("减小CSS和JS文件的大小")])])])],1)}),[],!1,null,null,null);v.default=a.exports}}]);