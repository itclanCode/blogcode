(window.webpackJsonp=window.webpackJsonp||[]).push([[215],{1244:function(e,v,_){e.exports=_.p+"assets/img/http-cache-01.fbcc7782.png"},1245:function(e,v,_){e.exports=_.p+"assets/img/http-cache-02.ea529e60.png"},2097:function(e,v,_){"use strict";_.r(v);var t=_(12),a=Object(t.a)({},(function(){var e=this,v=e.$createElement,t=e._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"第-1-题-http-请求方式有哪几种"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第-1-题-http-请求方式有哪几种"}},[e._v("#")]),e._v(" 第 1 题-http 请求方式有哪几种?")]),e._v(" "),t("p",[e._v("HTTP1.0 定义了三种请求方法: "),t("code",[e._v("GET")]),e._v(","),t("code",[e._v("POST")]),e._v(","),t("code",[e._v("HEAD")]),e._v("方法")]),e._v(" "),t("p",[e._v("HTTP1.1 新增了五种请求方法: "),t("code",[e._v("OPTIONS")]),e._v(","),t("code",[e._v("PUT")]),e._v(","),t("code",[e._v("DELETE")]),e._v(","),t("code",[e._v("TRACR")]),e._v(","),t("code",[e._v("CONNECT")]),e._v("方法")]),e._v(" "),t("ul",[t("li",[e._v("get: 请求指定的页面信息,并返回实体主体")]),e._v(" "),t("li",[e._v("HEAD: 类似 get 请求,只不过返回的响应中没有具体内容,用于获取报头")]),e._v(" "),t("li",[e._v("POST:向指定资源提交数据进行处理请求(如表单提交或上传文件),数据被包含在请求体中")]),e._v(" "),t("li",[e._v("put: 向指定资源位置上传其最新的内容")]),e._v(" "),t("li",[e._v("DELETE: 请求服务器删除"),t("code",[e._v("Request-url")]),e._v("所标识的资源")]),e._v(" "),t("li",[e._v("TRACE: 回显服务器收到的请求,主要用于测试或诊断")]),e._v(" "),t("li",[e._v("CONNECT:预留给能够将连接改为管道方式的代理服务器")])]),e._v(" "),t("h2",{attrs:{id:"第-2-题-http-中-get-与-post-有什么区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第-2-题-http-中-get-与-post-有什么区别"}},[e._v("#")]),e._v(" 第 2 题-http 中 get 与 post 有什么区别?")]),e._v(" "),t("p",[e._v("区别: "),t("code",[e._v("get")]),e._v("请求无消息体,只能携带少量数据,"),t("code",[e._v("post")]),e._v("请求有消息体,可以携带大量数据")]),e._v(" "),t("p",[e._v("携带数据的方式")]),e._v(" "),t("ol",[t("li",[t("code",[e._v("get")]),e._v("请求将数据放在"),t("code",[e._v("url")]),e._v("地止中,也就是 "),t("code",[e._v("http")]),e._v(" 请求协议头中")]),e._v(" "),t("li",[t("code",[e._v("post")]),e._v("请求将数据放在"),t("code",[e._v("body")]),e._v("请求体中")]),e._v(" "),t("li",[t("code",[e._v("get")]),e._v("方式提交的数据大概是 1"),t("code",[e._v("M")]),e._v(",而"),t("code",[e._v("post")]),e._v("没有限制")])]),e._v(" "),t("h2",{attrs:{id:"第-3-题-http-与-https-有什么区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第-3-题-http-与-https-有什么区别"}},[e._v("#")]),e._v(" 第 3 题-HTTP 与 HTTPS 有什么区别?")]),e._v(" "),t("p",[e._v("文本传输协议"),t("code",[e._v("HTTP")]),e._v("协议被用于在"),t("code",[e._v("Web")]),e._v("浏览器和网站服务器之间传递信息,"),t("code",[e._v("HTTP")]),e._v("协议以明文方式发送内容")]),e._v(" "),t("p",[e._v("不提供任何方式的数据加密，如果攻击者截取了"),t("code",[e._v("Web")]),e._v("浏览器和网站服务器之间的传输报文，就可以直接读懂其中的信息，因此，"),t("strong",[e._v("HTTP 协议不适合传输一些敏感信息，比如：信用卡号、密码等支付信息。")])]),e._v(" "),t("p",[e._v("为了解决 HTTP 协议的这一缺陷，需要使用另一种协议："),t("strong",[e._v("安全套接字层超文本传输协议 HTTPS")]),e._v(",为了数据传输的安全，"),t("strong",[e._v("HTTPS 在 HTTP 的基础上加入了 SSL 协议，SSL 依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密")])]),e._v(" "),t("p",[t("code",[e._v("HTTPS")]),e._v(" 协议主要作用可以分为两种:一种是建立一个信息安全通道,来保证数据传输的安全,另一种就是确认网站的真实性")]),e._v(" "),t("p",[t("strong",[e._v("区别:")]),e._v(" "),t("code",[e._v("HTTP")]),e._v(" 协议传输的数据都是未加密的,也就是明文的")]),e._v(" "),t("p",[t("strong",[e._v("HTTPS:")]),e._v(" 该协议是由"),t("code",[e._v("SSL+HTTP")]),e._v("协议构建的可进行加密传输,身份认证的网络协议,要比 "),t("code",[e._v("http")]),e._v(" 协议安全")]),e._v(" "),t("ol",[t("li",[t("code",[e._v("https")]),e._v("协议需要 "),t("code",[e._v("ca")]),e._v(" 申请证书,一般免费的证书较少,因而需要一定的费用")]),e._v(" "),t("li",[t("code",[e._v("http")]),e._v("是超文本传输协议,信息是明文传输,"),t("code",[e._v("https")]),e._v("则是具有安全性的"),t("code",[e._v("ssl")]),e._v("加密传输协议")]),e._v(" "),t("li",[t("code",[e._v("http")]),e._v("和"),t("code",[e._v("https")]),e._v("使用的是完全不同的连接方式,用的端口也不一样,"),t("code",[e._v("http")]),e._v("是"),t("code",[e._v("80")]),e._v(","),t("code",[e._v("https")]),e._v("是 443")]),e._v(" "),t("li",[t("code",[e._v("http")]),e._v(" 的连接很简单,是无状态的,"),t("code",[e._v("https")]),e._v("协议是由"),t("code",[e._v("ssl+http")]),e._v("协议构建的课进行加密传输,身份认证的网络协议,比"),t("code",[e._v("http")]),e._v("协议安全")])]),e._v(" "),t("h2",{attrs:{id:"第-4-题-强缓存与协商缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第-4-题-强缓存与协商缓存"}},[e._v("#")]),e._v(" 第 4 题-强缓存与协商缓存")]),e._v(" "),t("p",[e._v("缓存的优点:")]),e._v(" "),t("ul",[t("li",[e._v("减少了不必要的数据传输,节省带宽")]),e._v(" "),t("li",[e._v("减少服务器的负担,提升网站性能")]),e._v(" "),t("li",[e._v("加快了客户端加载网页的速度")]),e._v(" "),t("li",[e._v("用户体验友好")])]),e._v(" "),t("p",[e._v("缺点：")]),e._v(" "),t("ul",[t("li",[e._v("资源如果更改,但是客户端不及时更新就会造成用户获取信息滞后")])]),e._v(" "),t("p",[e._v("当浏览器去请求某个文件的时候，服务端就在"),t("code",[e._v("respone header")]),e._v("里面对该文件做了缓存配置。缓存的时间、缓存类型都由服务端控制")]),e._v(" "),t("p",[e._v("浏览器第一次请求时")]),e._v(" "),t("div",{attrs:{align:"center"}},[t("img",{staticClass:"medium-zoom lazy",attrs:{loading:"lazy",src:_(1244),alt:"缓存"}})]),e._v(" "),t("p",[e._v("浏览器后续在进行请求时")]),e._v(" "),t("div",{attrs:{align:"center"}},[t("img",{staticClass:"medium-zoom lazy",attrs:{loading:"lazy",src:_(1245),alt:"缓存"}})]),e._v(" "),t("p",[e._v("从上图可以知道,浏览器缓存包括两种类型,即强缓存(本地缓存)和协商缓存,浏览器在第一次请求发生后,再次请求时")]),e._v(" "),t("ul",[t("li",[e._v("浏览器在请求某一资源时,会先获取该资源缓存的"),t("code",[e._v("header")]),e._v("信息,判断是否命中强缓存("),t("code",[e._v("cache-control")]),e._v(")和"),t("code",[e._v("expires")]),e._v("信息,若命中,直接从缓存中获取资源信息,包括缓存"),t("code",[e._v("header")]),e._v("信息,本次请求根本就不会与服务器进行通信\n请求头信息")])]),e._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v(" Accept"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('""')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v(" Accept"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("Encoding"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" gzip"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("deflate\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v(" Accept"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("Language"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v("zh"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("cn\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v(" Connection"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" keep"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("alive\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v(" Host\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v(" Referer\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v(" User"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("Agent\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br")])]),t("p",[e._v("来自缓存的响应头的信息")]),e._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[e._v("Accept"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("Ranges"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" bytes\nCache"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("Control"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" max"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("age"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" xxxx\nContent"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("Encoding"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" gzip\nContent"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("length"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("3333")]),e._v("\nContent"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("Type"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" application"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("javascript\n"),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("Date")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v("xxx\n"),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("Expires")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" xxx\nLast"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("Modified"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v("xxx\n"),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("Server")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" 服务器\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("...")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br")])]),t("ul",[t("li",[e._v("如果没有命中强缓存,浏览器会发送请求到服务器,请求会携带第一次请求返回的有关缓存的"),t("code",[e._v("header")]),e._v("字段信息("),t("code",[e._v("Last-Modified/If-Modified-Since")]),e._v("和"),t("code",[e._v("Etag/If-None-Match")]),e._v("),由服务器根据请求中的相关"),t("code",[e._v("header")]),e._v("信息来比对结果是否协商缓存命中,若命中,则服务器返回新的响应"),t("code",[e._v("header")]),e._v("信息更新缓存中的对应"),t("code",[e._v("header")]),e._v("信息,但是并不返回资源内容,它会告知浏览器可以直接从缓存获取,否则返回最新的资源内容")])]),e._v(" "),t("p",[e._v("强缓存与协商缓存的区别,如下所示")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th"),e._v(" "),t("th",[e._v("获取资源形式")]),e._v(" "),t("th",[e._v("状态码")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("强缓存")]),e._v(" "),t("td",[e._v("从缓存取")]),e._v(" "),t("td",[e._v("200")])]),e._v(" "),t("tr",[t("td",[e._v("协商缓存")]),e._v(" "),t("td",[e._v("从缓存取")]),e._v(" "),t("td",[e._v("304")])])])]),e._v(" "),t("p",[e._v("强缓存相关的"),t("code",[e._v("header")]),e._v("字段")]),e._v(" "),t("p",[e._v("强缓存是直接从缓存中获取资源而不经过服务器,与强缓存相关的"),t("code",[e._v("header")]),e._v("字段有两个")]),e._v(" "),t("ol",[t("li",[t("code",[e._v("expires")]),e._v(":这是"),t("code",[e._v("http1.0")]),e._v("的规范,它的值为一个绝对时间的 GMT 格式的时间字符串,如"),t("code",[e._v("Mon, 15 Jun 2029 20:08:12 GMT")]),e._v(",如果发送请求的时间在"),t("code",[e._v("expires")]),e._v("之前,那么本地缓存始终有效,否则就会发送请求到服务器来获取资源")]),e._v(" "),t("li",[t("code",[e._v("cache-control")]),e._v(": "),t("code",[e._v("max-age=number")]),e._v(",这是"),t("code",[e._v("http1.1")]),e._v("时出现的"),t("code",[e._v("header")]),e._v("信息,主要利用该字段的"),t("code",[e._v("max-age")]),e._v("值来进行判断,它是一个相对值,资源第一次请求时间和"),t("code",[e._v("Cache-Control")]),e._v("设定有效期,计算出一个资源过期时间,在拿这个过期时间跟当前的请求时间比较,如果请求时间在过期时间之前,就能命中缓存,否则就不行,"),t("code",[e._v("cache-control")]),e._v("除了该字段外,还有下面几个比较常用的设置值")])]),e._v(" "),t("ul",[t("li",[t("code",[e._v("no-cache")]),e._v(": 不使用本地缓存,需要使用协商缓存,先与服务器确认返回的响应是否被更改,如果之前中存在"),t("code",[e._v("ETag")]),e._v(",那么请求的时候会与服务器验证,如果资源未被更改,则可以避免重新下载")]),e._v(" "),t("li",[t("code",[e._v("no-store")]),e._v(": 直接禁止浏览器缓存数据,每次用户请求该资源,都会向服务器发送一个请求,每次都会下载完整的资源")]),e._v(" "),t("li",[e._v("public: 可以被所有的用户缓存,包括终端用户和 cdn 等中间代理服务器")]),e._v(" "),t("li",[e._v("private: 只能被终端用户的浏览器缓存,不允许 cdn 等中缓存服务器对其缓存")])]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("注意")]),e._v(" "),t("p",[e._v("如果"),t("code",[e._v("cache-control")]),e._v("与"),t("code",[e._v("expires")]),e._v("同时存在的话,"),t("code",[e._v("cache-control")]),e._v("的优先级高于"),t("code",[e._v("expires")])])]),e._v(" "),t("p",[t("strong",[e._v("协商缓存相关的 header 字段")])]),e._v(" "),t("p",[e._v("协商缓存都是由服务器来确定缓存资源是否可用的,所以客户端与服务器端需要某种标识来进行通信,从而让服务器判断请求资源是否可以缓存访问,这主要涉及到下面两组 header 字段")]),e._v(" "),t("p",[e._v("这两组搭档都是成对出现的,即第一次请求的响应头带上某个字段(Last-Modified 或 Etag),则后续请求则会带上对应的请求字段(If-Modified-Since 或 If-Node-Match),若响应头没有"),t("code",[e._v("Last-Modified")]),e._v("或"),t("code",[e._v("Etag")]),e._v("字段,则请求头也不会由对应的字段")]),e._v(" "),t("ol",[t("li",[e._v("Last-Modified/If-Modified-Since\n二者的值都是 GMT 格式的时间字符串,具体过程")])]),e._v(" "),t("ul",[t("li",[e._v("浏览器第一次跟服务器请求一个资源,服务器在返回这个资源的同时,在"),t("code",[e._v("response")]),e._v("的"),t("code",[e._v("header")]),e._v("加上"),t("code",[e._v("Last-Modified")]),e._v("的"),t("code",[e._v("header")]),e._v(",这个"),t("code",[e._v("header")]),e._v("表示这个资源在服务器上的最后修改时间")]),e._v(" "),t("li",[e._v("浏览器再次跟服务器请求这个资源时,在"),t("code",[e._v("request")]),e._v("的"),t("code",[e._v("header")]),e._v("上加上"),t("code",[e._v("If-Modified-Since")]),e._v("的"),t("code",[e._v("header")]),e._v(",这个"),t("code",[e._v("header")]),e._v("的值就是上一次请求时返回的"),t("code",[e._v("Last-Modified")]),e._v("的值")]),e._v(" "),t("li",[e._v("服务器再次收到资源请求时,根据浏览器传过来的"),t("code",[e._v("If-Modified-Since")]),e._v("和资源在服务器上的最后修改时间判断资源是否有变化,如果没有变化则返回 304 Not Modified,但是不会返回资源内容,如果有变化,就正常返回资源内容,当服务器返回 304 Not Modified 的响应时,response header 中不会再添加 Last-Modified 的 header,因为既然资源没有变化,那么"),t("code",[e._v("Last-Modified")]),e._v("也就不会改变,这是服务器返回 304 的 response header")]),e._v(" "),t("li",[e._v("浏览器收到 304 的响应后,就会从缓存中加载资源")]),e._v(" "),t("li",[e._v("如果协商缓存没有命中,浏览器直接从服务器加载资源时,Last-Modified 的 Header 在重新加载的时候会被更新,下次请求时,If-Modified-Since 会启用上次返回的 Last-Modifed 的值")])]),e._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[e._v("Etag/If-None-Match")])]),e._v(" "),t("p",[e._v("这两个值是由服务器生成的每个资源的唯一标识符,只要资源有变化,这个值就会改变,其判断过程与"),t("code",[e._v("Last-Modified/If-Modified-Since")]),e._v("类似,与"),t("code",[e._v("Last-Modified")]),e._v("不一样的是,当服务器返回"),t("code",[e._v("304 Not Modified")]),e._v("的响应时,由于"),t("code",[e._v("ETag")]),e._v("重新生成过,"),t("code",[e._v("response header")]),e._v("中还会把这个"),t("code",[e._v("ETag")]),e._v("返回,即使这个"),t("code",[e._v("ETag")]),e._v("跟之前没有变化")]),e._v(" "),t("p",[e._v("既有"),t("code",[e._v("Last-Modified")]),e._v("又为何有"),t("code",[e._v("ETag")])]),e._v(" "),t("p",[e._v("使用"),t("code",[e._v("Last-Modified")]),e._v("已经足以让浏览器知道本地的缓存副本是否足够新,那为什么还需要"),t("code",[e._v("Etag")]),e._v("呢，HTTP1.1 中"),t("code",[e._v("ETag")]),e._v("的出现主要时为了解决几个"),t("code",[e._v("Last-Modified")]),e._v("比较难解决的问题")]),e._v(" "),t("ul",[t("li",[e._v("一些文件也许会周期性的更改,但是他的内容并不改变(仅仅改变的修改时间),这个时候,我们并不希望客户端认为这个文件被修改了,而重新 get")]),e._v(" "),t("li",[e._v("某些文件修改非常频繁,比如在秒以下的时间内进行修改(比方说 1s 内修改了 N 次),"),t("code",[e._v("If-Modified-Since")]),e._v("能检查到的粒度时 s 级的,这种修改无法判断(或者说 UNIX 记录 MTIME 只能精确到秒)")]),e._v(" "),t("li",[e._v("某些服务器不能精确得到的文件的最后修改时间")])]),e._v(" "),t("p",[e._v("这时,利用"),t("code",[e._v("ETag")]),e._v("能够更加准确的控制缓存,因为"),t("code",[e._v("ETag")]),e._v("时服务器自动生成或由开发者生成对应资源在服务器端的唯一的标识符")]),e._v(" "),t("p",[e._v("Last-Modified 与 ETag 是可以一起使用的,服务器会优先验证"),t("code",[e._v("ETag")]),e._v(",一致的情况下,才会继续比对"),t("code",[e._v("Last-Modified")]),e._v(",最后才决定是否返回"),t("code",[e._v("304")])]),e._v(" "),t("footer-FooterLink",{attrs:{isShareLink:!0,isDaShang:!0}})],1)}),[],!1,null,null,null);v.default=a.exports}}]);