(window.webpackJsonp=window.webpackJsonp||[]).push([[372],{2026:function(s,e,n){"use strict";n.r(e);var a=n(12),t=Object(a.a)({},(function(){var s=this,e=s.$createElement,n=s._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"理解-es6-中的-symbol-类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#理解-es6-中的-symbol-类型"}},[s._v("#")]),s._v(" 理解 Es6 中的 Symbol 类型")]),s._v(" "),n("h2",{attrs:{id:"快速导航"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#快速导航"}},[s._v("#")]),s._v(" 快速导航")]),s._v(" "),n("TOC"),s._v(" "),n("h2",{attrs:{id:"前言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),n("p",[s._v("在 Es6 中引入了一个新的基础数据类型:"),n("code",[s._v("Symbol")]),s._v(",对于其他基本数据类型("),n("code",[s._v("数字number")]),s._v(","),n("code",[s._v("布尔boolean")]),s._v(","),n("code",[s._v("null")]),s._v(","),n("code",[s._v("undefined")]),s._v(","),n("code",[s._v("字符串string")]),s._v(")想必都比较熟悉,但是这个"),n("code",[s._v("Symbol")]),s._v("平时用得很少,甚至在实际开发中觉得没有什么卵用,能够涉及到的应用场景屈指可数.")]),s._v(" "),n("p",[s._v("往往在面试的时候,屡面不爽.下面一起来看看的这个数据类型的")]),s._v(" "),n("h2",{attrs:{id:"具体解决的问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#具体解决的问题"}},[s._v("#")]),s._v(" 具体解决的问题")]),s._v(" "),n("p",[s._v("在 Es5 的对象属性名中都是字符串,当一对象的属性名出现重复时,后者往往会覆盖前者.")]),s._v(" "),n("p",[s._v("若使用"),n("code",[s._v("Symbol")]),s._v("就能够保证每个属性的名字都是独一无二的,相当于生成一个唯一的标识 ID,这样就从根本上防止属性名的冲突")]),s._v(" "),n("h2",{attrs:{id:"symbol-类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#symbol-类型"}},[s._v("#")]),s._v(" Symbol 类型")]),s._v(" "),n("p",[n("code",[s._v("symbol")]),s._v("是"),n("code",[s._v("Es6")]),s._v("规范引入的一项新的特性,表示独一无二的值,归纳为"),n("code",[s._v("JS")]),s._v("语言的第 7 种数据类型,它是通过"),n("code",[s._v("Symbol")]),s._v("函数生成")]),s._v(" "),n("p",[s._v("通过"),n("code",[s._v("Symbol()")]),s._v("函数来创建生成一个"),n("code",[s._v("Symbol实例")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let s1 = Symbol();\nconsole.log(typeof s1); //symbol\nconsole.log(Object.prototype.toString.call(s1)); // [object Symbol]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("在上面示例代码中,用"),n("code",[s._v("typeof")]),s._v("进行了类型的检测,它返回的是"),n("code",[s._v("Symbol")]),s._v("类型,而不是什么"),n("code",[s._v("string")]),s._v(","),n("code",[s._v("object")]),s._v("之类的")]),s._v(" "),n("p",[s._v("在 "),n("code",[s._v("Es5")]),s._v(" 中原有的对象的属性名是字符串类型中拓展了一个"),n("code",[s._v("Symbol")]),s._v("类型,也就是说,现在对象的属性名有两种类型")]),s._v(" "),n("ul",[n("li",[s._v("字符串类型")]),s._v(" "),n("li",[n("code",[s._v("Symbol")]),s._v(" 类型")])]),s._v(" "),n("div",{staticClass:"custom-block warning"},[n("p",{staticClass:"custom-block-title"},[s._v("注意")]),s._v(" "),n("p",[n("code",[s._v("Symbol")]),s._v(" 函数前不能使用"),n("code",[s._v("new")]),s._v("关键字,否则就会报错,这是因为生成的"),n("code",[s._v("Symbol")]),s._v("是一个原始类型的值,它不是对象")]),s._v(" "),n("p",[s._v("因为不是对象,所以也不能添加属性,它是一种类似于字符串的数据类型,可以理解为是在字符串类型的一种额外的拓展")]),s._v(" "),n("p",[n("code",[s._v("Symbol")]),s._v("函数可以接收一个字符串做为参数,它是对该"),n("code",[s._v("Symbol")]),s._v("实例的一种描述,主要是为了在控制台显示")]),s._v(" "),n("p",[n("strong",[s._v("Symbol 的描述是可选的，仅用于调试目的或转为字符串时,进行区分")]),s._v(",不是访问 symbol 本身")]),s._v(" "),n("p",[s._v("可以使用"),n("code",[s._v("Symbol().description")]),s._v("会返回"),n("code",[s._v("Symbol()")]),s._v("的实例描述的具体内容,如果有值,则会返回该描述,若无则会返回"),n("code",[s._v("undefined")])]),s._v(" "),n("p",[n("code",[s._v("description")]),s._v("是"),n("code",[s._v("Symbol")]),s._v("的一个静态属性")])]),s._v(" "),n("p",[s._v("当使用字符串定义对象的属性名时,若出现同名属性,则会出现属性覆盖问题,而使用"),n("code",[s._v("Symbol")]),s._v("类型定义的对象属性名,则不会,它是独一无二的,每调用一次"),n("code",[s._v("Symbol()")]),s._v("都会生成一个唯一的标识,即使是使用"),n("code",[s._v("Symbol()")]),s._v(" 生成的实例描述相同,但它们依旧不相等,总会返回"),n("code",[s._v("false")]),s._v("\n如下代码所示")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("div",{staticClass:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("div",{staticClass:"highlighted"},[s._v(" ")]),n("br")]),n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" s1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Symbol")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'itclanCoder'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 定义了一s1变量,它是Symbol()类型,并接收了一个itclanCoder字符串,作为该Symbol的实例")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" s2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Symbol")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'itclanCoder'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 实例化了一个s2,Symbol()类型")]),s._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("description"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// itclanCoder")]),s._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("description"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// itclanCoder")]),s._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" s2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n")])]),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("从第 5 行代码比较结果看出,"),n("code",[s._v("s1")]),s._v("与"),n("code",[s._v("s2")]),s._v("是两个不同的"),n("code",[s._v("Symbol")]),s._v("值,这里让"),n("code",[s._v("Symbol")]),s._v("接受一个参数,如果不加参数,它们在控制台输出的都是"),n("code",[s._v("Symbol")]),s._v(",即使参数相同,但是它们依旧是两个不同的"),n("code",[s._v("Symbol")])]),s._v(" "),n("p",[s._v("如果您希望使用拥有同一个"),n("code",[s._v("Symbol")]),s._v("值,那该怎么办?在 Es6 中,提供了一个"),n("code",[s._v("Symbol.for()")]),s._v("方法可以实现,它接受一个字符串作为参数\n然后搜索有没有以该参数作为名称的"),n("code",[s._v("Symbol值")])]),s._v(" "),n("p",[s._v("如果有,就返回这个"),n("code",[s._v("Symbol值")]),s._v(",否则就新建一个以该字符串为名称的"),n("code",[s._v("Symbol值")]),s._v(",并会将它注册到全局坏境中")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let s1 = Symbol.for('itclanCoder');\nlet s2 = Symbol.for('itclanCoder');\nconsole.log(s1 === s2); // true\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("在上面的示例代码中,"),n("code",[s._v("s1")]),s._v(" 和 "),n("code",[s._v("s2")]),s._v(" 都是"),n("code",[s._v("Symbol")]),s._v("实例化出来的值,但是它们都是由"),n("code",[s._v("Symbol.for")]),s._v("方法生成的,指向的是同一个值,地止")]),s._v(" "),n("ul",[n("li",[n("h3",{attrs:{id:"symbol-与-symbol-for-的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#symbol-与-symbol-for-的区别"}},[s._v("#")]),s._v(" "),n("code",[s._v("Symbol")]),s._v(" 与 "),n("code",[s._v("Symbol.for")]),s._v(" 的区别")])])]),s._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[s._v("比较")]),s._v(" "),n("p",[n("strong",[s._v("共同点:")]),s._v(" 都会生成新的"),n("code",[s._v("Symbol")]),s._v(" "),n("strong",[s._v("不同点:")]),s._v(" "),n("code",[s._v("Symbol.for()")]),s._v("会被登记在全局坏境中供搜索,而"),n("code",[s._v("Symbol()")]),s._v("不会,"),n("code",[s._v("Symbol.for()")]),s._v("不会每次调用就返回一个新的"),n("code",[s._v("Symbol")]),s._v("类型的值,而是会先检查给定的"),n("code",[s._v("key")]),s._v("是否已经存在,如果不存在才会新建一个"),n("code",[s._v("Symbol")]),s._v("值")]),s._v(" "),n("p",[s._v("如:调用"),n("code",[s._v("Symbol.for('itclanCoder')")]),s._v("100 次,每次都会返回同一个"),n("code",[s._v("Symbol")]),s._v("值,但是调用"),n("code",[s._v("Symbol('itclanCoder')")]),s._v("100 次,会返回 100 个不同的"),n("code",[s._v("Symbol")]),s._v("值")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('Symbol.for("itclanCoder") === Symbol.for("itclanCoder") // true\n\nSymbol("itclanCoder") === Symbol("itclanCoder") // false\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])])]),s._v(" "),n("p",[s._v("在上面代码中，由于"),n("code",[s._v("Symbol()")]),s._v("写法没有登记机制,所以每次调用都会返回一个不同的值,也就是每次都会在栈内存中重新开辟一块空间")]),s._v(" "),n("p",[s._v("也可以通过"),n("code",[s._v("Symbol.keyFor()")]),s._v("方法返回一个已登记的"),n("code",[s._v("Symbol")]),s._v("类型值的"),n("code",[s._v("key")]),s._v(",通过该方法检测是否有没有全局注册")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('let s1 = Symbol.for("itclan");\nconsole.log(Symbol.keyFor(s1)) // "itclan"\n\nlet s2 = Symbol("itclan");\nconsole.log(Symbol.keyFor(s2)) // undefined\n\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("在上面的代码中,变量"),n("code",[s._v("s2")]),s._v("属于未被登记的"),n("code",[s._v("Symbol")]),s._v("值,所以就返回"),n("code",[s._v("undefined")])]),s._v(" "),n("div",{staticClass:"custom-block warning"},[n("p",{staticClass:"custom-block-title"},[s._v("注意")]),s._v(" "),n("p",[n("code",[s._v("Symbol.for()")]),s._v("是为"),n("code",[s._v("Symbol")]),s._v("值登记的名字,在整个全局作用域范围内都起作用")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function foo() {\n  return Symbol.for('itclan');\n}\n\nconst x = foo();\nconst y = Symbol.for('itclan');\nconsole.log(x === y); // true\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])])]),s._v(" "),n("p",[s._v("在上面代码中，"),n("code",[s._v("Symbol.for('itclan')")]),s._v("是在函数内部运行的，但是生成的 "),n("code",[s._v("Symbol 值")]),s._v("是登记在全局环境的。所以，第二次运行"),n("code",[s._v("Symbol.for('itclan')")]),s._v("可以取到这个 "),n("code",[s._v("Symbol 值")])]),s._v(" "),n("h3",{attrs:{id:"应用场景-symbol-for"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#应用场景-symbol-for"}},[s._v("#")]),s._v(" "),n("strong",[s._v("应用场景")]),s._v(":"),n("code",[s._v("Symbol.for()")])]),s._v(" "),n("p",[s._v("这个全局记录特性,可以用在不同的"),n("code",[s._v("iframe")]),s._v("火"),n("code",[s._v("service worker")]),s._v("中取到同一个值")]),s._v(" "),n("p",[s._v("在前端开发中,有时候会用到"),n("code",[s._v("iframe")]),s._v(",但是"),n("code",[s._v("iframe")]),s._v("之间相互隔离的,有时候想要取到不同的"),n("code",[s._v("iframe")]),s._v("中同一份数据,那么这个"),n("code",[s._v("Symbol.for()")]),s._v("就派上用场了的")]),s._v(" "),n("p",[s._v("如下示例代码所示")]),s._v(" "),n("details",{staticClass:"custom-block details"},[n("summary",[s._v("点击即可查看")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let iframe = document.createElement('iframe');\niframe.src = String(window.location);\ndocument.body.appendChild(iframe);\n\niframe.contentWindow.Symbol.for('foo') === Symbol.for('foo') // true\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])])]),s._v(" "),n("p",[s._v("在上面代码中，"),n("code",[s._v("iframe")]),s._v("窗口生成的"),n("code",[s._v("Symbol 值")]),s._v("，可以在主页面拿得到,在整个全局作用域内都可以取到")]),s._v(" "),n("ul",[n("li",[n("h2",{attrs:{id:"symbol-应用场景"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#symbol-应用场景"}},[s._v("#")]),s._v(" Symbol 应用场景")])])]),s._v(" "),n("ul",[n("li",[n("h3",{attrs:{id:"应用场景-1-使用symbol来作为对象属性名-key"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#应用场景-1-使用symbol来作为对象属性名-key"}},[s._v("#")]),s._v(" 应用场景 1-使用"),n("code",[s._v("Symbol")]),s._v("来作为对象属性名(key)")])])]),s._v(" "),n("p",[s._v("在 Es6 之前,通常定义或访问对象的属性都是使用字符串,如下代码所示")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let web = {\n    site: \"http://itclan.cn\",\n    name: \"itclanCoder\"\n}\nconsole.log(web['site']); // http://itclan.cn\nconsole.log(web['name']); // itclanCoder\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("访问变量对象的属性,除了可以通过"),n("code",[s._v("对象.属性名")]),s._v("的方式外,可以通过"),n("code",[s._v("对象['属性名']")]),s._v("的方式进行访问,如果一个对象中出现了同名属性那么后者会覆盖前者")]),s._v(" "),n("p",[s._v("由于每调用一次"),n("code",[s._v("Symbol")]),s._v("函数,生成的值都是不相等的,这意味着"),n("code",[s._v("Symbol")]),s._v("值可以作为标识符,用于对象的属性名,就能保证不会出现同名的属性")]),s._v(" "),n("p",[s._v("针对一个对象由多个模块构成的情况就变得非常有用了的,使用"),n("code",[s._v("Symbol")]),s._v("能放置某一个键被不小心改写或覆盖")]),s._v(" "),n("p",[n("code",[s._v("Symbol")]),s._v("可以用于对象属性的定义和访问")]),s._v(" "),n("p",[s._v("如下示例代码所示")]),s._v(" "),n("details",{staticClass:"custom-block details"},[n("summary",[s._v("点击即可查看")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('const PERSON_NAME = Symbol();\nconst PERSON_AGE = Symbol();\n\nlet person = {\n    [PERSON_NAME]: "随笔川迹"\n}\n\nperson[PERSON_AGE] =  20;\n\nconsole.log(person[PERSON_NAME])  // 随笔川迹\nconsole.log(person[PERSON_AGE])   // 20\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])])]),s._v(" "),n("p",[s._v("在上面的示例代码中,使用"),n("code",[s._v("Symbol")]),s._v("创建了"),n("code",[s._v("PERSON_NAME")]),s._v(","),n("code",[s._v("PERSON_AGE")]),s._v("两个"),n("code",[s._v("Symbol")]),s._v("类型,但是在实际开发中却带来了一些问题")]),s._v(" "),n("p",[s._v("当您使用了"),n("code",[s._v("Symbol")]),s._v("作为对象的属性"),n("code",[s._v("key")]),s._v("后,你若想对该对象进行遍历,于是用到了"),n("code",[s._v("Object.keys()")]),s._v(","),n("code",[s._v("for..in")]),s._v(","),n("code",[s._v("for..of")]),s._v(","),n("code",[s._v("Object.getOwnPropertyNames()、JSON.stringify()")]),s._v("进行枚举对象的属性名")]),s._v(" "),n("p",[s._v("你会发现使用"),n("code",[s._v("Symbol")]),s._v("后会带来一个非常令人难以接受的现实,如下示例代码所示")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('let person = {\n   [Symbol(\'name\')]: \'随笔川迹\',\n   age: 20,\n   job: \'Engineer\'\n}\nconsole.log(Object.keys(person)) // ["age", "job"]\nfor(var i in person) {\n    console.log(i);   // age job\n}\n\nObject.getOwnPropertyNames(person) // ["age", "job"]\nJSON.stringify(person); // "{"age":20,"job":"Engineer"}"\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[s._v("通过上面的示例代码结果可知,"),n("code",[s._v("Symbol")]),s._v("类型实例化出的"),n("code",[s._v("key")]),s._v("是不能通过"),n("code",[s._v("Object.keys()")]),s._v(","),n("code",[s._v("for..in")]),s._v(","),n("code",[s._v("for..of")]),s._v(",来枚举的")]),s._v(" "),n("p",[s._v("它也没有包含子自身属性集合"),n("code",[s._v("Object.getOwnPropertyName()")]),s._v("当中,该方法无法获取到")]),s._v(" "),n("p",[s._v("利用该特性,我们可以"),n("strong",[s._v("把一些不需要对外操作和访问的属性使用"),n("code",[s._v("Symbol")]),s._v("来定义")])]),s._v(" "),n("p",[s._v("这样,我们在定义接口的数据对象时,可以决定对象的哪些属性,对内私有操作与对外公有操作变得可控,更加的方便")]),s._v(" "),n("p",[s._v("使用常规的方法,无法获取到以"),n("code",[s._v("Symbol")]),s._v("方式定义对象的属性,在 Es6 中,提供了一个专门针对"),n("code",[s._v("Symbol")]),s._v("的 API")]),s._v(" "),n("p",[s._v("用"),n("code",[s._v("Object.getOwnPropertySymbols()")]),s._v("方法,可以获取指定对象的所有"),n("code",[s._v("Symbol")]),s._v("属性名,该方法会返回一个数组")]),s._v(" "),n("p",[s._v("它的成员是当前对象的所有用作属性名的 "),n("code",[s._v("Symbol 值")])]),s._v(" "),n("details",{staticClass:"custom-block details"},[n("summary",[s._v("点击即可查看")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let person = {\n   [Symbol('name')]: '随笔川迹',\n   age: 20,\n   job: 'Engineer'\n}\n\n// 使用Object的API\nObject.getOwnPropertySymbols(person) // [Symbol(name)]\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])])]),s._v(" "),n("p",[s._v("如下是"),n("code",[s._v("Object.getOwnPropertySymbols()")]),s._v("方法与"),n("code",[s._v("for..in")]),s._v("循环,"),n("code",[s._v("Object.getOwnPropertyNames")]),s._v("方法进行对比的例子")]),s._v(" "),n("details",{staticClass:"custom-block details"},[n("summary",[s._v("点击即可查看")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const person = {};\nconst name = Symbol('name');\n\nperson[name] = \"随笔川迹\"\n\nfor(let i  in person) {\n  console.log(i); // 无任何输出\n}\n\nObject.getOwnPropertyNames(person); // []\nObject.getOwnPropertySymbols(person); // [Symbol('name')]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])])]),s._v(" "),n("p",[s._v("在上面代码中，使用"),n("code",[s._v("for...in")]),s._v("循环和"),n("code",[s._v("Object.getOwnPropertyNames()")]),s._v("方法都得不到 "),n("code",[s._v("Symbol 键名")]),s._v("，需要使用"),n("code",[s._v("Object.getOwnPropertySymbols()")]),s._v("方法。")]),s._v(" "),n("p",[s._v("如果想要获取全部的属性,可以使用一个新的 API，"),n("code",[s._v("Reflect.ownKeys()")]),s._v("方法可以返回所有类型的键名，包括常规键名和 "),n("code",[s._v("Symbol")]),s._v(" 键名")]),s._v(" "),n("details",{staticClass:"custom-block details"},[n("summary",[s._v("点击即可查看")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('let person = {\n  [Symbol(\'name\')]: "川川",\n  enum: 2,\n  nonEnum: 3\n};\n\nReflect.ownKeys(person)  //  ["enum", "nonEnum", Symbol(name)]\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])])]),s._v(" "),n("p",[s._v("正由于以"),n("code",[s._v("Symbol 值")]),s._v("作为键名，不会被常规方法("),n("code",[s._v("for..in")]),s._v(","),n("code",[s._v("for..of")]),s._v(")遍历得到。我们可以利用这个特性，为对象定义一些非私有的、但又希望只用于内部的方法,达到保护私有属性的目的")]),s._v(" "),n("ul",[n("li",[n("h3",{attrs:{id:"应用场景-2-使用-symbol-定义类的私有属性-方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#应用场景-2-使用-symbol-定义类的私有属性-方法"}},[s._v("#")]),s._v(" 应用场景 2：使用 Symbol 定义类的私有属性/方法")])])]),s._v(" "),n("p",[s._v("JavaScript 是一弱类型语言,弱并不是指这个语言功能弱,而所指的是,它的类型没有强制性,是没有如"),n("code",[s._v("java")]),s._v("等面向对象语言的访问控制关键字"),n("code",[s._v("private")]),s._v("的，类上所有定义的属性和方法都是公开访问的,当然在"),n("code",[s._v("TypeScript")]),s._v("中新增了一些关键字,解决了此问题的")]),s._v(" "),n("p",[s._v("有时候,类上定义的属性和方法都能公开访问,会造成一些困扰")]),s._v(" "),n("p",[s._v("而有了"),n("code",[s._v("Symbol")]),s._v("类的私有属性和方法成为了实现")]),s._v(" "),n("p",[s._v("如下示例代码")]),s._v(" "),n("details",{staticClass:"custom-block details"},[n("summary",[s._v("点击即可查看")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let size = Symbol('size');  // 声明定义了一个size变量,类型是Symbol(),类型描述内容是size\n\nclass Collection {          // class关键字定义了一个Collection类\n  constructor() {           // 构造器`constructor`函数\n    this[size] = 0;         // 在当前类上私有化了一个size属性\n  }\n\n  add(item) {              // Collection类下的一个方法\n    this[this[size]] = item;\n    this[size]++;\n  }\n\n  static sizeOf(instance) { // 静态属性\n    return instance[size];\n  }\n}\n\nlet x = new Collection(); // 实例化x对象\nCollection.sizeOf(x) // 0\n\nx.add('foo');       // 调用方法\nCollection.sizeOf(x) // 1\n\nObject.keys(x) // ['0']\nObject.getOwnPropertyNames(x) // ['0']\nObject.getOwnPropertySymbols(x) // [Symbol(size)]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br")])])]),s._v(" "),n("p",[s._v("上面代码中，对象 "),n("code",[s._v("x")]),s._v(" 的 "),n("code",[s._v("size")]),s._v(" 属性是一个 "),n("code",[s._v("Symbol")]),s._v(" 值，所以 "),n("code",[s._v("Object.keys(x)")]),s._v("、"),n("code",[s._v("Object.getOwnPropertyNames(x)")]),s._v("都无法获取它。这就造成了一种非私有的内部方法的效果")]),s._v(" "),n("ul",[n("li",[n("h3",{attrs:{id:"应用场景-3-模块化机制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#应用场景-3-模块化机制"}},[s._v("#")]),s._v(" 应用场景 3-模块化机制")])])]),s._v(" "),n("p",[s._v("结合"),n("code",[s._v("Symbol")]),s._v("与模块化机制,类的私有属性和方法完美实现,如下代码所示\n在文件"),n("code",[s._v("a.js")]),s._v("中")]),s._v(" "),n("details",{staticClass:"custom-block details"},[n("summary",[s._v("点击即可查看")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const PASSWORD = Symbol();  // 定义一个PASSWORD变量,类型是Symbol\n\nclass Login() {      // class关键字声明一个Login类\n  constructor(username, password) {    // 构造器函数内初始化属性\n    this.username = username;\n    this[PASSWORD] = password;\n  }\n\n  checkPassword(pwd) {\n    return this[PASSWORD] === pwd;\n  }\n\n}\nexport default Login;\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])])]),s._v(" "),n("p",[s._v("在文件"),n("code",[s._v("b.js")]),s._v("中")]),s._v(" "),n("details",{staticClass:"custom-block details"},[n("summary",[s._v("点击即可查看")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("import Login from './a'\n\nconst login = new Login('itclanCoder', '123456'); // 实例化一个login对象\n\nlogin.checkPassword('123456'); // true\nlogin.PASSWORD;  // 访问不到\nlogin[PASSWORD]; // 访问不到\nlogin['PASSWORD'] // 访问不到\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])])]),s._v(" "),n("p",[s._v("因为通过"),n("code",[s._v("Symbol")]),s._v("定义的"),n("code",[s._v("PASSWORD")]),s._v("常量定义在"),n("code",[s._v("a.js")]),s._v("模块中,外面的模块是获取不到这个"),n("code",[s._v("Symbol")]),s._v("的,在外部无法引用这个值,也无法改写,也不可能在在创建一个一模一样的"),n("code",[s._v("Symbol")]),s._v("出来")]),s._v(" "),n("p",[s._v("因为"),n("code",[s._v("Symbol")]),s._v("是唯一的")]),s._v(" "),n("p",[s._v("在"),n("code",[s._v("a.js")]),s._v("模块中,这个"),n("code",[s._v("PASSWORD")]),s._v("的"),n("code",[s._v("Symbol")]),s._v("类型只能在当前模块文件("),n("code",[s._v("a.js")]),s._v(")中内部使用,所以使用它来定义的类属性是没有办法被模块外访问到的")]),s._v(" "),n("p",[s._v("这样就达到了一个私有化的效果")]),s._v(" "),n("ul",[n("li",[n("h3",{attrs:{id:"应用场景-4-使用symbol来替代常量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#应用场景-4-使用symbol来替代常量"}},[s._v("#")]),s._v(" 应用场景 4-使用"),n("code",[s._v("Symbol")]),s._v("来替代常量")])])]),s._v(" "),n("p",[s._v("在使用"),n("code",[s._v("React")]),s._v("中,结合"),n("code",[s._v("Redux")]),s._v("做公共数据状态管理时,当想要改变组件中的某个状态时,"),n("code",[s._v("reducer")]),s._v("是一个纯函数,它会返回一个最新的状态给"),n("code",[s._v("store")]),s._v(",返回的结果是由"),n("code",[s._v("action")]),s._v("和"),n("code",[s._v("state")]),s._v("共同决定的")]),s._v(" "),n("p",[n("code",[s._v("action")]),s._v("是一个对象,有具体的类型"),n("code",[s._v("type")]),s._v("值,如果你写过几行"),n("code",[s._v("Redux")]),s._v("的代码,就会常常看到,进行"),n("code",[s._v("action")]),s._v("的拆分,将事件动作的类型定义成常量")]),s._v(" "),n("details",{staticClass:"custom-block details"},[n("summary",[s._v("点击即可查看")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const CHANGE_INPUT_VALUE = 'CHANGE_INPUT_VALUE';  // 监听input框输入值的常量\nconst ADD_INPUT_CONTENT = 'ADD_INPUT_CONTENT';    // 添加列表\nconst DELETE_LIST = 'DELETE_LIST';                // 删除列表\n\nfunction reducer(state, action) {\n    const newState =  JSON.parse(JSON.stringify(state));\n    switch(action.type) {\n        case CHANGE_INPUT_VALUE:\n             // ...\n        case ADD_INPUT_CONTENT:\n             // ...\n        case DELETE_LIST;\n              // ...\n        default:\n             return state;\n    }\n\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])])]),s._v(" "),n("p",[s._v("以上代码在"),n("code",[s._v("Redux")]),s._v("中很常见,将"),n("code",[s._v("action")]),s._v("对象中的"),n("code",[s._v("type")]),s._v("值,给抽离出来,定义一个常量存储,来代表一种业务逻辑,通常希望这些常量是唯一的,在"),n("code",[s._v("Redux")]),s._v("中定义成常量,是为了便于调试查错")]),s._v(" "),n("p",[s._v("常常因为取"),n("code",[s._v("type")]),s._v("值时,非常苦恼.")]),s._v(" "),n("p",[s._v("现在有了"),n("code",[s._v("Symbol")]),s._v(",改写一下,就可以这样")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const CHANGE_INPUT_VALUE = Symbol()\nconst ADD_INPUT_CONTENT = Symbol();\nconst DELETE_LIST = Symbol()\n\nfunction reducer(state, action) {\n    const newState =  JSON.parse(JSON.stringify(state));\n    switch(action.type) {\n        case CHANGE_INPUT_VALUE:\n             // ...\n        case ADD_INPUT_CONTENT:\n             // ...\n        case DELETE_LIST;\n              // ...\n        default:\n             return state;\n    }\n\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("p",[s._v("通过"),n("code",[s._v("Symbol")]),s._v("定义字符串常量,就保证了三个常量的值唯一性")]),s._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[s._v("划重点")]),s._v(" "),n("ul",[n("li",[s._v("常量使用"),n("code",[s._v("Symbol")]),s._v("值最大的好处,就是其他任何值都不可能有相同的值了,可以保证常量的唯一性,因此,可以保证上面的"),n("code",[s._v("switch")]),s._v("语句按照你设计的方式条件去工作")]),s._v(" "),n("li",[s._v("当"),n("code",[s._v("Symbol")]),s._v("值作为属性名时,该属性是公开属性,不是私有属性")])])]),s._v(" "),n("ul",[n("li",[n("h3",{attrs:{id:"应用场景-5-注册和获取全局的symbol"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#应用场景-5-注册和获取全局的symbol"}},[s._v("#")]),s._v(" 应用场景 5-注册和获取全局的"),n("code",[s._v("Symbol")])])])]),s._v(" "),n("p",[s._v("在浏览器窗口("),n("code",[s._v("window")]),s._v(")中,使用"),n("code",[s._v("Symbol()")]),s._v("函数来定义生成的"),n("code",[s._v("Symbol")]),s._v("实例是唯一的")]),s._v(" "),n("p",[s._v("但是若应用涉及到多个"),n("code",[s._v("window")]),s._v(",最常见的就是在各个页面窗口中嵌入"),n("code",[s._v("iframe")]),s._v("了,并在各个"),n("code",[s._v("iframe")]),s._v("页面中取到来自同一份公共的数据源")]),s._v(" "),n("p",[s._v("也就是在各个"),n("code",[s._v("window")]),s._v("中使用的某些"),n("code",[s._v("Symbol")]),s._v("希望是同一个,那么这个时候,使用"),n("code",[s._v("Symbol()")]),s._v("就不行不通了")]),s._v(" "),n("p",[s._v("因为用它在不同"),n("code",[s._v("window")]),s._v("中创建的"),n("code",[s._v("Symbol实例")]),s._v("总是唯一的，而我们需要的是在所有这些"),n("code",[s._v("window环境下")]),s._v("保持一个共享的"),n("code",[s._v("Symbol")]),s._v("值。")]),s._v(" "),n("p",[s._v("在这种情况下，我们就需要使用另一个 API 来创建或获取"),n("code",[s._v("Symbol")]),s._v("，那就是"),n("code",[s._v("Symbol.for()")]),s._v("，它可以注册或获取一个"),n("code",[s._v("window")]),s._v("间全局的"),n("code",[s._v("Symbol实例")]),s._v("，它是"),n("code",[s._v("Symbol")]),s._v("的一个静态方法")]),s._v(" "),n("p",[s._v("这个在前面已经提到过一次,这个还是有那么一点点用处,所以在提一嘴的")]),s._v(" "),n("p",[s._v("如下示例代码所示")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let gs1 = Symbol.for('global_symbol_1')  //注册一个全局Symbol\nlet gs2 = Symbol.for('global_symbol_1')  //获取全局Symbol\n\nconsole.log(gs1 === gs2 ) // true\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("经过"),n("code",[s._v("Symbol.for()")]),s._v("实例化出来的"),n("code",[s._v("Symbol")]),s._v("字符串类型,只要描述的内容相同,那么不光是在当前"),n("code",[s._v("window")]),s._v("中是唯一的,在其他全局范围内的"),n("code",[s._v("window")]),s._v("也是唯一的,并且相同")]),s._v(" "),n("p",[s._v("该特性,若是创建跨文件可用的"),n("code",[s._v("symbol")]),s._v("，甚至跨域（每个"),n("code",[s._v("window")]),s._v("都有它自己的全局作用域） , 可以使用 "),n("code",[s._v("Symbol.for()")]),s._v("取到相同的值")]),s._v(" "),n("p",[s._v("也就是说,使用了"),n("code",[s._v("Symbol.for()")]),s._v("在全局范围内,"),n("code",[s._v("Symbol")]),s._v("类型值可以共享")]),s._v(" "),n("h2",{attrs:{id:"注意事项"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注意事项"}},[s._v("#")]),s._v(" 注意事项")]),s._v(" "),n("ul",[n("li",[n("h3",{attrs:{id:"symbol-值不能与其他类型的值进行运算-会报错"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#symbol-值不能与其他类型的值进行运算-会报错"}},[s._v("#")]),s._v(" "),n("code",[s._v("Symbol")]),s._v(" 值不能与其他类型的值进行运算-会报错")])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let symItclan = Symbol('itclan');\n\nconsole.log(\"主站\" + symItclan)\nconsole.log(`主站 ${symItclan}`) // Uncaught TypeError: Cannot convert a Symbol value to a string\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("ul",[n("li",[n("h3",{attrs:{id:"symbol可以显示转为字符串"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#symbol可以显示转为字符串"}},[s._v("#")]),s._v(" "),n("code",[s._v("Symbol")]),s._v("可以显示转为字符串")])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let SyItclanCoder = Symbol('https://coder.itclan.cn');\n\nconsole.log(String(SyItclanCoder)) // Symbol(https://coder.itclan.cn)\nconsole.log(SyItclanCoder.toString()) // Symbol(https://coder.itclan.cn)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("ul",[n("li",[n("h3",{attrs:{id:"symbol值可以转为布尔值-但是不能转为数值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#symbol值可以转为布尔值-但是不能转为数值"}},[s._v("#")]),s._v(" "),n("code",[s._v("Symbol")]),s._v("值可以转为布尔值,但是不能转为数值")])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let sym = Symbol();\nconsole.log(Boolean(sym)) // true\nconsole.log(!sym)  // false\n\nif (sym) {\n  // ...\n}\n\nNumber(sym) // TypeError  Cannot convert a Symbol value to a number\nsym + 2 // TypeError\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("由上面的错误提示可以看出,"),n("code",[s._v("Symbol")]),s._v("不能转换为数字,无法做相应的运算")]),s._v(" "),n("ul",[n("li",[n("h3",{attrs:{id:"symbol函数不能使用new命令"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#symbol函数不能使用new命令"}},[s._v("#")]),s._v(" "),n("code",[s._v("Symbol")]),s._v("函数不能使用"),n("code",[s._v("new")]),s._v("命令")])])]),s._v(" "),n("p",[n("code",[s._v("Symbol")]),s._v("函数前不能使用"),n("code",[s._v("new")]),s._v("命令,否则就会报错,"),n("code",[s._v("Symbol")]),s._v("是一个原始类型的值,不是对象,它是类似字符串的数据类型")]),s._v(" "),n("ul",[n("li",[n("h3",{attrs:{id:"symbol值作为对象属性名时-不能用点运算符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#symbol值作为对象属性名时-不能用点运算符"}},[s._v("#")]),s._v(" "),n("code",[s._v("Symbol值")]),s._v("作为对象属性名时，不能用点运算符")])])]),s._v(" "),n("p",[s._v("当"),n("code",[s._v("Symbol")]),s._v("值作为对象的属性名时,访问它时,不能用点运算符")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("div",{staticClass:"highlight-lines"},[n("br"),n("br"),n("br"),n("div",{staticClass:"highlighted"},[s._v(" ")]),n("br"),n("br")]),n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" username "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Symbol")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" person "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nperson"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("username "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'随笔川迹'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nperson"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("username"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// undefined")]),s._v("\nperson"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'username'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 随笔川迹")]),s._v("\n")])]),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("第 4 行代码值为"),n("code",[s._v("undefined")]),s._v(",因为点运算符后面总是字符串,所以不会读取"),n("code",[s._v("username")]),s._v("作为标识符名所指代的那个值")]),s._v(" "),n("p",[s._v("导致"),n("code",[s._v("person")]),s._v("对象的属性名实际上是一个字符串,而不是一个"),n("code",[s._v("Symbol")]),s._v("值")]),s._v(" "),n("p",[s._v("由此可见:在对象内部,使用"),n("code",[s._v("Symbol")]),s._v("类型定义属性名时,"),n("strong",[n("code",[s._v("Symbol")]),s._v("值必须放在中括号之中")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('let s = Symbol();\nlet obj = {\n  [s]: function(arg) {\n    return arg;\n  }\n}\n\nobj[s]("itclanCoder")\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("在上面的代码中,如果变量"),n("code",[s._v("s")]),s._v("不放在中括号中,该属性的键名就是字符串"),n("code",[s._v("s")]),s._v(",而不是定义"),n("code",[s._v("Symbol")]),s._v("类型值")]),s._v(" "),n("h2",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),n("p",[s._v("本文主要介绍了"),n("code",[s._v("Es6")]),s._v("中"),n("code",[s._v("Symbol")]),s._v("的常见使用,"),n("code",[s._v("Symbol")]),s._v("是一种新的基础类型,它形式字符串的数据类型,是字符串类型的一种额外拓展")]),s._v(" "),n("p",[s._v("常用于作为对象属性的键名,每个从"),n("code",[s._v("Symbol()")]),s._v("返回的"),n("code",[s._v("symbol值")]),s._v("都是唯一的,可保证对象的每个属性名的唯一性,可解决属性名的冲突问题")]),s._v(" "),n("p",[n("code",[s._v("Symbol()")]),s._v("函数会返回"),n("code",[s._v("symbol")]),s._v("类型的值，该类型具有静态属性(如"),n("code",[s._v("Symbol().description")]),s._v(",)和静态方法("),n("code",[s._v("Symbol.for()")]),s._v(","),n("code",[s._v("Symbol.keyFor()")]),s._v(")")]),s._v(" "),n("p",[s._v("当然也介绍了"),n("code",[s._v("Symbol")]),s._v("的一些常见应用场景,作为对象的属性名(key),定义类的私有属性和方法,替代常量,以及注册全局"),n("code",[s._v("Symbol")]),s._v("等,以及一些注意事项")]),s._v(" "),n("p",[s._v("关于"),n("code",[s._v("Symbol")]),s._v("暂且就这么多,还是得多多使用")]),s._v(" "),n("h2",{attrs:{id:"相关参考文档"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#相关参考文档"}},[s._v("#")]),s._v(" 相关参考文档")]),s._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/symbol",target:"_blank",rel:"noopener noreferrer"}},[s._v("Es6 标准入门-Symbol"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol",target:"_blank",rel:"noopener noreferrer"}},[s._v("MDN-Symbol"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Glossary/Symbol",target:"_blank",rel:"noopener noreferrer"}},[s._v("MDN-Symbol 介绍"),n("OutboundLink")],1)])]),s._v(" "),n("footer-FooterLink",{attrs:{isShareLink:!0,isDaShang:!0}})],1)}),[],!1,null,null,null);e.default=t.exports}}]);